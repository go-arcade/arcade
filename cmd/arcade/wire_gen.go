// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/observabil/arcade/internal/app"
	"github.com/observabil/arcade/internal/engine/conf"
	"github.com/observabil/arcade/internal/engine/repo"
	"github.com/observabil/arcade/internal/engine/router"
	"github.com/observabil/arcade/internal/pkg/grpc"
	"github.com/observabil/arcade/pkg/ctx"
	"github.com/observabil/arcade/pkg/http"
	"github.com/observabil/arcade/pkg/plugin"
	"github.com/observabil/arcade/pkg/storage"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func initApp(configPath string, appCtx *ctx.Context, logger *zap.Logger) (*app.App, func(), error) {
	appConfig := conf.ProvideConf(configPath)
	http := provideHttpConfig(appConfig)
	routerRouter := router.ProvideRouter(http, appCtx)
	pluginRepo := repo.ProvidePluginRepo(appCtx)
	pluginRepoAdapter := repo.ProvidePluginRepoAdapter(pluginRepo)
	pluginRepository := providePluginRepository(pluginRepoAdapter)
	manager := plugin.ProvidePluginManager(pluginRepository)
	grpcConf := provideGrpcConfig(appConfig, logger)
	serverWrapper := grpc.ProvideGrpcServer(grpcConf, logger)
	storageStorage := conf.ProvideStorageConfig(appConfig, appCtx)
	storageProvider, err := storage.ProvideStorage(storageStorage)
	if err != nil {
		return nil, nil, err
	}
	appApp, cleanup, err := app.NewApp(routerRouter, logger, manager, serverWrapper, storageProvider)
	if err != nil {
		return nil, nil, err
	}
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideHttpConfig(appConf conf.AppConfig) *http.Http {
	return &appConf.Http
}

func provideGrpcConfig(appConf conf.AppConfig, logger *zap.Logger) *grpc.GrpcConf {
	return &appConf.Grpc
}

func providePluginRepository(adapter *repo.PluginRepoAdapter) plugin.PluginRepository {
	return adapter
}
