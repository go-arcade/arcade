// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/observabil/arcade/internal/app"
	"github.com/observabil/arcade/internal/engine/conf"
	"github.com/observabil/arcade/internal/engine/router"
	"github.com/observabil/arcade/internal/pkg/grpc"
	"github.com/observabil/arcade/pkg/ctx"
	"github.com/observabil/arcade/pkg/http"
	"github.com/observabil/arcade/pkg/plugin"
	"github.com/observabil/arcade/pkg/storage"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func initApp(configPath string, appCtx *ctx.Context, logger *zap.Logger) (*app.App, func(), error) {
	appConfig := conf.ProvideConf(configPath)
	http := provideHttpConfig(appConfig)
	routerRouter := router.ProvideRouter(http, appCtx)
	manager := plugin.ProvidePluginManager()
	grpcConf := provideGrpcConfig(appConfig)
	serverWrapper := grpc.ProvideGrpcServer(grpcConf)
	storageStorage := provideStorageConfig(appConfig, appCtx)
	storageProvider, err := storage.ProvideStorage(storageStorage)
	if err != nil {
		return nil, nil, err
	}
	appApp, cleanup, err := app.NewApp(routerRouter, logger, manager, serverWrapper, storageProvider)
	if err != nil {
		return nil, nil, err
	}
	return appApp, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideStorageConfig(appConf conf.AppConfig, appCtx *ctx.Context) *storage.Storage {
	return &storage.Storage{
		Ctx:       appCtx,
		Provider:  appConf.Storage.Provider,
		AccessKey: appConf.Storage.AccessKey,
		SecretKey: appConf.Storage.SecretKey,
		Endpoint:  appConf.Storage.Endpoint,
		Bucket:    appConf.Storage.Bucket,
		Region:    appConf.Storage.Region,
		UseTLS:    appConf.Storage.UseTLS,
		BasePath:  appConf.Storage.BasePath,
	}
}

func provideHttpConfig(appConf conf.AppConfig) *http.Http {
	return &appConf.Http
}

func provideGrpcConfig(appConf conf.AppConfig) *grpc.GrpcConf {
	return &appConf.Grpc
}
