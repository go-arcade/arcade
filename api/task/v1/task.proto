syntax = "proto3";

package task.v1;

option go_package = "github.com/go-arcade/arcade/api/task/v1;taskv1";

// TaskService - Task and pipeline management interface
service TaskService {
    // Ping service health check
    rpc Ping(PingRequest) returns (PingResponse) {}

    // Create task
    rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse) {}

    // Get task details
    rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {}

    // List tasks (supports pagination and filtering)
    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {}

    // Update task
    rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse) {}

    // Delete task
    rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse) {}

    // Cancel task
    rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse) {}

    // Retry task
    rpc RetryTask(RetryTaskRequest) returns (RetryTaskResponse) {}

    // Get task log
    rpc GetTaskLog(GetTaskLogRequest) returns (GetTaskLogResponse) {}

    // List task artifacts
    rpc ListTaskArtifacts(ListTaskArtifactsRequest) returns (ListTaskArtifactsResponse) {}
}

// Task status enum
enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_PENDING = 1;       // Pending
  TASK_STATUS_QUEUED = 2;        // Queued
  TASK_STATUS_RUNNING = 3;       // Running
  TASK_STATUS_SUCCESS = 4;       // Success
  TASK_STATUS_FAILED = 5;        // Failed
  TASK_STATUS_CANCELLED = 6;     // Cancelled
  TASK_STATUS_TIMEOUT = 7;       // Timeout
  TASK_STATUS_SKIPPED = 8;       // Skipped
}

// Trigger type enum
enum TriggerType {
  TRIGGER_TYPE_UNSPECIFIED = 0;
  TRIGGER_TYPE_MANUAL = 1;       // Manual trigger
  TRIGGER_TYPE_WEBHOOK = 2;      // Webhook trigger
  TRIGGER_TYPE_SCHEDULE = 3;     // Schedule trigger
  TRIGGER_TYPE_API = 4;          // API trigger
}

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
    int64 timestamp = 2;
}

// Create task request
message CreateTaskRequest {
  string name = 1;                      // Task name
  string pipeline_id = 2;               // Pipeline ID
  int32 stage = 3;                      // Stage number
  repeated string commands = 4;         // List of commands to execute
  map<string, string> env = 5;          // Environment variables
  string workspace = 6;                 // Working directory
  int32 timeout = 7;                    // Timeout (seconds, default 3600)
  string image = 8;                     // Docker image
  map<string, string> secrets = 9;      // Secret information
  repeated ArtifactConfig artifacts = 10; // Artifact configuration
  repeated string depends_on = 11;      // List of dependent task IDs
  bool allow_failure = 12;              // Allow failure
  int32 retry_count = 13;               // Retry count
  LabelSelector label_selector = 14;    // Label selector (for matching Agent)
}

// Artifact configuration
message ArtifactConfig {
  string name = 1;                      // Artifact name
  string path = 2;                      // Artifact path (supports glob pattern)
  string destination = 3;               // Target storage path
  bool expire = 4;                      // Whether it expires
  int64 expire_days = 5;                // Expiration days
}

// Create task response
message CreateTaskResponse {
  bool success = 1;
  string message = 2;
  string task_id = 3;                   // Created task ID
}

// 获取任务请求
message GetTaskRequest {
  string task_id = 1;
}

// 获取任务响应
message GetTaskResponse {
  bool success = 1;
  string message = 2;
  TaskDetail task = 3;
}

// Task details
message TaskDetail {
  string task_id = 1;                   // Task ID
  string name = 2;                      // Task name
  string pipeline_id = 3;               // Pipeline ID
  int32 stage = 4;                      // Stage number
  TaskStatus status = 5;                // Task status
  repeated string commands = 6;         // List of commands to execute
  map<string, string> env = 7;          // Environment variables
  string workspace = 8;                 // Working directory
  int32 timeout = 9;                    // Timeout (seconds)
  string image = 10;                    // Docker image
  repeated ArtifactConfig artifacts = 11; // Artifact configuration
  repeated string depends_on = 12;      // List of dependent task IDs
  bool allow_failure = 13;              // Allow failure
  int32 retry_count = 14;               // Retry count
  int32 retried_times = 15;             // Times retried
  string agent_id = 16;                 // Executing agent ID
  int32 exit_code = 17;                 // Exit code
  string error_message = 18;            // Error message
  int64 created_at = 19;                // Creation time
  int64 started_at = 20;                // Start time
  int64 finished_at = 21;               // Finish time
  int64 duration = 22;                  // Execution duration (milliseconds)
  string created_by = 23;               // Creator
  LabelSelector label_selector = 24;    // Label selector
  map<string, string> agent_labels = 25; // Agent labels executing the task
}

// List tasks request
message ListTasksRequest {
  string pipeline_id = 1;               // Pipeline ID (optional)
  TaskStatus status = 2;                // Status filter (optional)
  string agent_id = 3;                  // Agent ID filter (optional)
  int32 page = 4;                       // Page number (starting from 1)
  int32 page_size = 5;                  // Items per page (default 20)
  string sort_by = 6;                   // Sort field (created_at, started_at, etc.)
  bool sort_desc = 7;                   // Descending order
}

// List tasks response
message ListTasksResponse {
  bool success = 1;
  string message = 2;
  repeated TaskDetail tasks = 3;
  int32 total = 4;                      // Total count
  int32 page = 5;                       // Current page
  int32 page_size = 6;                  // Items per page
}

// Update task request
message UpdateTaskRequest {
  string task_id = 1;
  string name = 2;                      // Task name (optional)
  repeated string commands = 3;         // List of commands to execute (optional)
  map<string, string> env = 4;          // Environment variables (optional)
  int32 timeout = 5;                    // Timeout (optional)
}

// 更新任务响应
message UpdateTaskResponse {
  bool success = 1;
  string message = 2;
}

// 删除任务请求
message DeleteTaskRequest {
  string task_id = 1;
}

// 删除任务响应
message DeleteTaskResponse {
  bool success = 1;
  string message = 2;
}

// Cancel task request
message CancelTaskRequest {
  string task_id = 1;
  string reason = 2;                    // Cancellation reason
}

// 取消任务响应
message CancelTaskResponse {
  bool success = 1;
  string message = 2;
}

// 重试任务请求
message RetryTaskRequest {
  string task_id = 1;
}

// Retry task response
message RetryTaskResponse {
  bool success = 1;
  string message = 2;
  string new_task_id = 3;               // Newly created task ID
}

// Get task log request
message GetTaskLogRequest {
  string task_id = 1;
  int32 offset = 2;                     // Log offset (line number)
  int32 limit = 3;                      // Number to fetch (default 1000 lines)
}

// Get task log response
message GetTaskLogResponse {
  bool success = 1;
  string message = 2;
  repeated LogLine logs = 3;
  int32 total_lines = 4;                // Total lines
  bool has_more = 5;                    // Whether there are more logs
}

// Log line
message LogLine {
  int32 line_number = 1;                // Line number
  int64 timestamp = 2;                  // Timestamp
  string level = 3;                     // Log level
  string content = 4;                   // Log content
}

// 列出任务产物请求
message ListTaskArtifactsRequest {
  string task_id = 1;
}

// List task artifacts response
message ListTaskArtifactsResponse {
  bool success = 1;
  string message = 2;
  repeated Artifact artifacts = 3;
}

// Artifact
message Artifact {
  string artifact_id = 1;               // Artifact ID
  string name = 2;                      // Artifact name
  string path = 3;                      // Artifact path
  int64 size = 4;                       // File size (bytes)
  string download_url = 5;              // Download URL
  int64 created_at = 6;                 // Creation time
  int64 expire_at = 7;                  // Expiration time
}

// Stage configuration
message Stage {
  int32 order = 1;                      // Stage number
  string name = 2;                      // Stage name
  repeated TaskConfig tasks = 3;        // List of task configurations
}

// Task configuration
message TaskConfig {
  string name = 1;                      // Task name
  repeated string commands = 2;         // Commands to execute
  map<string, string> env = 3;          // Environment variables
  string workspace = 4;                 // Working directory
  int32 timeout = 5;                    // Timeout
  string image = 6;                     // Docker image
  repeated ArtifactConfig artifacts = 7; // Artifact configuration
  bool allow_failure = 8;               // Allow failure
  int32 retry_count = 9;                // Retry count
  LabelSelector label_selector = 10;    // Label selector (for matching Agent)
}

// ============ Label Selector Related ============

// Label selector - For matching Agent with task
message LabelSelector {
  // Match all specified labels (AND logic)
  map<string, string> match_labels = 1;

  // Label expressions (support more complex matching rules)
  repeated LabelSelectorRequirement match_expressions = 2;
}

// Label selector requirement
message LabelSelectorRequirement {
  string key = 1;                     // Label key
  LabelOperator operator = 2;         // Operator
  repeated string values = 3;         // Value list
}

// Label operator
enum LabelOperator {
  LABEL_OPERATOR_UNSPECIFIED = 0;
  LABEL_OPERATOR_IN = 1;              // Label value is in values list
  LABEL_OPERATOR_NOT_IN = 2;          // Label value is not in values list
  LABEL_OPERATOR_EXISTS = 3;          // Label key exists
  LABEL_OPERATOR_NOT_EXISTS = 4;      // Label key does not exist
  LABEL_OPERATOR_GT = 5;              // Label value is greater than specified value (for numeric comparison)
  LABEL_OPERATOR_LT = 6;              // Label value is less than specified value (for numeric comparison)
}
