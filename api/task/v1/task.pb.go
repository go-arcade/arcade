// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/task/v1/proto/task.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 任务状态枚举
type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNKNOWN   TaskStatus = 0
	TaskStatus_TASK_STATUS_PENDING   TaskStatus = 1 // 等待执行
	TaskStatus_TASK_STATUS_QUEUED    TaskStatus = 2 // 已入队
	TaskStatus_TASK_STATUS_RUNNING   TaskStatus = 3 // 执行中
	TaskStatus_TASK_STATUS_SUCCESS   TaskStatus = 4 // 执行成功
	TaskStatus_TASK_STATUS_FAILED    TaskStatus = 5 // 执行失败
	TaskStatus_TASK_STATUS_CANCELLED TaskStatus = 6 // 已取消
	TaskStatus_TASK_STATUS_TIMEOUT   TaskStatus = 7 // 超时
	TaskStatus_TASK_STATUS_SKIPPED   TaskStatus = 8 // 已跳过
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNKNOWN",
		1: "TASK_STATUS_PENDING",
		2: "TASK_STATUS_QUEUED",
		3: "TASK_STATUS_RUNNING",
		4: "TASK_STATUS_SUCCESS",
		5: "TASK_STATUS_FAILED",
		6: "TASK_STATUS_CANCELLED",
		7: "TASK_STATUS_TIMEOUT",
		8: "TASK_STATUS_SKIPPED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNKNOWN":   0,
		"TASK_STATUS_PENDING":   1,
		"TASK_STATUS_QUEUED":    2,
		"TASK_STATUS_RUNNING":   3,
		"TASK_STATUS_SUCCESS":   4,
		"TASK_STATUS_FAILED":    5,
		"TASK_STATUS_CANCELLED": 6,
		"TASK_STATUS_TIMEOUT":   7,
		"TASK_STATUS_SKIPPED":   8,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_task_v1_proto_task_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_api_task_v1_proto_task_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{0}
}

// 触发类型枚举
type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNKNOWN  TriggerType = 0
	TriggerType_TRIGGER_TYPE_MANUAL   TriggerType = 1 // 手动触发
	TriggerType_TRIGGER_TYPE_WEBHOOK  TriggerType = 2 // Webhook触发
	TriggerType_TRIGGER_TYPE_SCHEDULE TriggerType = 3 // 定时触发
	TriggerType_TRIGGER_TYPE_API      TriggerType = 4 // API触发
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNKNOWN",
		1: "TRIGGER_TYPE_MANUAL",
		2: "TRIGGER_TYPE_WEBHOOK",
		3: "TRIGGER_TYPE_SCHEDULE",
		4: "TRIGGER_TYPE_API",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNKNOWN":  0,
		"TRIGGER_TYPE_MANUAL":   1,
		"TRIGGER_TYPE_WEBHOOK":  2,
		"TRIGGER_TYPE_SCHEDULE": 3,
		"TRIGGER_TYPE_API":      4,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_task_v1_proto_task_proto_enumTypes[1].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_api_task_v1_proto_task_proto_enumTypes[1]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{1}
}

// 标签操作符
type LabelOperator int32

const (
	LabelOperator_LABEL_OPERATOR_UNKNOWN    LabelOperator = 0
	LabelOperator_LABEL_OPERATOR_IN         LabelOperator = 1 // 标签值在values列表中
	LabelOperator_LABEL_OPERATOR_NOT_IN     LabelOperator = 2 // 标签值不在values列表中
	LabelOperator_LABEL_OPERATOR_EXISTS     LabelOperator = 3 // 标签key存在
	LabelOperator_LABEL_OPERATOR_NOT_EXISTS LabelOperator = 4 // 标签key不存在
	LabelOperator_LABEL_OPERATOR_GT         LabelOperator = 5 // 标签值大于指定值（用于数值比较）
	LabelOperator_LABEL_OPERATOR_LT         LabelOperator = 6 // 标签值小于指定值（用于数值比较）
)

// Enum value maps for LabelOperator.
var (
	LabelOperator_name = map[int32]string{
		0: "LABEL_OPERATOR_UNKNOWN",
		1: "LABEL_OPERATOR_IN",
		2: "LABEL_OPERATOR_NOT_IN",
		3: "LABEL_OPERATOR_EXISTS",
		4: "LABEL_OPERATOR_NOT_EXISTS",
		5: "LABEL_OPERATOR_GT",
		6: "LABEL_OPERATOR_LT",
	}
	LabelOperator_value = map[string]int32{
		"LABEL_OPERATOR_UNKNOWN":    0,
		"LABEL_OPERATOR_IN":         1,
		"LABEL_OPERATOR_NOT_IN":     2,
		"LABEL_OPERATOR_EXISTS":     3,
		"LABEL_OPERATOR_NOT_EXISTS": 4,
		"LABEL_OPERATOR_GT":         5,
		"LABEL_OPERATOR_LT":         6,
	}
)

func (x LabelOperator) Enum() *LabelOperator {
	p := new(LabelOperator)
	*p = x
	return p
}

func (x LabelOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_api_task_v1_proto_task_proto_enumTypes[2].Descriptor()
}

func (LabelOperator) Type() protoreflect.EnumType {
	return &file_api_task_v1_proto_task_proto_enumTypes[2]
}

func (x LabelOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelOperator.Descriptor instead.
func (LabelOperator) EnumDescriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{2}
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 创建任务请求
type CreateTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                  // 任务名称
	PipelineId    string                 `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`                                                    // 所属流水线ID
	Stage         int32                  `protobuf:"varint,3,opt,name=stage,proto3" json:"stage,omitempty"`                                                                               // 阶段序号
	Commands      []string               `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty"`                                                                          // 执行命令列表
	Env           map[string]string      `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`          // 环境变量
	Workspace     string                 `protobuf:"bytes,6,opt,name=workspace,proto3" json:"workspace,omitempty"`                                                                        // 工作目录
	Timeout       int32                  `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                           // 超时时间（秒，默认3600）
	Tags          []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                  // 任务标签（已废弃，建议使用label_selector）
	Image         string                 `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`                                                                                // Docker镜像
	Secrets       map[string]string      `protobuf:"bytes,10,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 密钥信息
	Artifacts     []*ArtifactConfig      `protobuf:"bytes,11,rep,name=artifacts,proto3" json:"artifacts,omitempty"`                                                                       // 产物配置
	DependsOn     []string               `protobuf:"bytes,12,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`                                                      // 依赖的任务ID列表
	AllowFailure  bool                   `protobuf:"varint,13,opt,name=allow_failure,json=allowFailure,proto3" json:"allow_failure,omitempty"`                                            // 是否允许失败
	RetryCount    int32                  `protobuf:"varint,14,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`                                                  // 重试次数
	LabelSelector *LabelSelector         `protobuf:"bytes,15,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`                                          // 标签选择器（用于匹配Agent）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskRequest) Reset() {
	*x = CreateTaskRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRequest) ProtoMessage() {}

func (x *CreateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTaskRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *CreateTaskRequest) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *CreateTaskRequest) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *CreateTaskRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CreateTaskRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *CreateTaskRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *CreateTaskRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateTaskRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *CreateTaskRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *CreateTaskRequest) GetArtifacts() []*ArtifactConfig {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *CreateTaskRequest) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *CreateTaskRequest) GetAllowFailure() bool {
	if x != nil {
		return x.AllowFailure
	}
	return false
}

func (x *CreateTaskRequest) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *CreateTaskRequest) GetLabelSelector() *LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

// 产物配置
type ArtifactConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // 产物名称
	Path          string                 `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                // 产物路径（支持glob模式）
	Destination   string                 `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`                  // 目标存储路径
	Expire        bool                   `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`                           // 是否过期
	ExpireDays    int64                  `protobuf:"varint,5,opt,name=expire_days,json=expireDays,proto3" json:"expire_days,omitempty"` // 过期天数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactConfig) Reset() {
	*x = ArtifactConfig{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactConfig) ProtoMessage() {}

func (x *ArtifactConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactConfig.ProtoReflect.Descriptor instead.
func (*ArtifactConfig) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{3}
}

func (x *ArtifactConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ArtifactConfig) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *ArtifactConfig) GetExpire() bool {
	if x != nil {
		return x.Expire
	}
	return false
}

func (x *ArtifactConfig) GetExpireDays() int64 {
	if x != nil {
		return x.ExpireDays
	}
	return 0
}

// 创建任务响应
type CreateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TaskId        string                 `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"` // 创建的任务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTaskResponse) Reset() {
	*x = CreateTaskResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskResponse) ProtoMessage() {}

func (x *CreateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateTaskResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 获取任务请求
type GetTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 获取任务响应
type GetTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Task          *TaskDetail            `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{6}
}

func (x *GetTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskResponse) GetTask() *TaskDetail {
	if x != nil {
		return x.Task
	}
	return nil
}

// 任务详情
type TaskDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                                                                           // 任务ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                                             // 任务名称
	PipelineId    string                 `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`                                                                               // 所属流水线ID
	Stage         int32                  `protobuf:"varint,4,opt,name=stage,proto3" json:"stage,omitempty"`                                                                                                          // 阶段序号
	Status        TaskStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=api.task.v1.TaskStatus" json:"status,omitempty"`                                                                            // 任务状态
	Commands      []string               `protobuf:"bytes,6,rep,name=commands,proto3" json:"commands,omitempty"`                                                                                                     // 执行命令列表
	Env           map[string]string      `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                                     // 环境变量
	Workspace     string                 `protobuf:"bytes,8,opt,name=workspace,proto3" json:"workspace,omitempty"`                                                                                                   // 工作目录
	Timeout       int32                  `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                                                      // 超时时间（秒）
	Tags          []string               `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                                            // 任务标签（已废弃）
	Image         string                 `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`                                                                                                          // Docker镜像
	Artifacts     []*ArtifactConfig      `protobuf:"bytes,12,rep,name=artifacts,proto3" json:"artifacts,omitempty"`                                                                                                  // 产物配置
	DependsOn     []string               `protobuf:"bytes,13,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`                                                                                 // 依赖的任务ID列表
	AllowFailure  bool                   `protobuf:"varint,14,opt,name=allow_failure,json=allowFailure,proto3" json:"allow_failure,omitempty"`                                                                       // 是否允许失败
	RetryCount    int32                  `protobuf:"varint,15,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`                                                                             // 重试次数
	RetriedTimes  int32                  `protobuf:"varint,16,opt,name=retried_times,json=retriedTimes,proto3" json:"retried_times,omitempty"`                                                                       // 已重试次数
	AgentId       string                 `protobuf:"bytes,17,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`                                                                                       // 执行的Agent ID
	ExitCode      int32                  `protobuf:"varint,18,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`                                                                                   // 退出码
	ErrorMessage  string                 `protobuf:"bytes,19,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                                                        // 错误信息
	CreatedAt     int64                  `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                                // 创建时间
	StartedAt     int64                  `protobuf:"varint,21,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`                                                                                // 开始时间
	FinishedAt    int64                  `protobuf:"varint,22,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`                                                                             // 结束时间
	Duration      int64                  `protobuf:"varint,23,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                   // 执行时长（毫秒）
	CreatedBy     string                 `protobuf:"bytes,24,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                                                                                 // 创建者
	LabelSelector *LabelSelector         `protobuf:"bytes,25,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`                                                                     // 标签选择器
	AgentLabels   map[string]string      `protobuf:"bytes,26,rep,name=agent_labels,json=agentLabels,proto3" json:"agent_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 执行任务的Agent标签
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskDetail) Reset() {
	*x = TaskDetail{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDetail) ProtoMessage() {}

func (x *TaskDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDetail.ProtoReflect.Descriptor instead.
func (*TaskDetail) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{7}
}

func (x *TaskDetail) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskDetail) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *TaskDetail) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *TaskDetail) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNKNOWN
}

func (x *TaskDetail) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *TaskDetail) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskDetail) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *TaskDetail) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskDetail) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskDetail) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TaskDetail) GetArtifacts() []*ArtifactConfig {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *TaskDetail) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *TaskDetail) GetAllowFailure() bool {
	if x != nil {
		return x.AllowFailure
	}
	return false
}

func (x *TaskDetail) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *TaskDetail) GetRetriedTimes() int32 {
	if x != nil {
		return x.RetriedTimes
	}
	return 0
}

func (x *TaskDetail) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *TaskDetail) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TaskDetail) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *TaskDetail) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskDetail) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *TaskDetail) GetFinishedAt() int64 {
	if x != nil {
		return x.FinishedAt
	}
	return 0
}

func (x *TaskDetail) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TaskDetail) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TaskDetail) GetLabelSelector() *LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *TaskDetail) GetAgentLabels() map[string]string {
	if x != nil {
		return x.AgentLabels
	}
	return nil
}

// 列出任务请求
type ListTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`    // 流水线ID（可选）
	Status        TaskStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=api.task.v1.TaskStatus" json:"status,omitempty"` // 状态过滤（可选）
	AgentId       string                 `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`             // Agent ID过滤（可选）
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`                                 // 页码（从1开始）
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`         // 每页数量（默认20）
	SortBy        string                 `protobuf:"bytes,6,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                // 排序字段（created_at、started_at等）
	SortDesc      bool                   `protobuf:"varint,7,opt,name=sort_desc,json=sortDesc,proto3" json:"sort_desc,omitempty"`         // 是否降序
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{8}
}

func (x *ListTasksRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *ListTasksRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_TASK_STATUS_UNKNOWN
}

func (x *ListTasksRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListTasksRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTasksRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListTasksRequest) GetSortDesc() bool {
	if x != nil {
		return x.SortDesc
	}
	return false
}

// 列出任务响应
type ListTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Tasks         []*TaskDetail          `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{9}
}

func (x *ListTasksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListTasksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTasksResponse) GetTasks() []*TaskDetail {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ListTasksResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListTasksResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListTasksResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 更新任务请求
type UpdateTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                         // 任务名称（可选）
	Commands      []string               `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`                                                                 // 执行命令列表（可选）
	Env           map[string]string      `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 环境变量（可选）
	Timeout       int32                  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                  // 超时时间（可选）
	Tags          []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                                                         // 任务标签（可选）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskRequest) Reset() {
	*x = UpdateTaskRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskRequest) ProtoMessage() {}

func (x *UpdateTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *UpdateTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTaskRequest) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *UpdateTaskRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *UpdateTaskRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *UpdateTaskRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// 更新任务响应
type UpdateTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTaskResponse) Reset() {
	*x = UpdateTaskResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTaskResponse) ProtoMessage() {}

func (x *UpdateTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除任务请求
type DeleteTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskRequest) Reset() {
	*x = DeleteTaskRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRequest) ProtoMessage() {}

func (x *DeleteTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRequest.ProtoReflect.Descriptor instead.
func (*DeleteTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 删除任务响应
type DeleteTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskResponse) Reset() {
	*x = DeleteTaskResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskResponse) ProtoMessage() {}

func (x *DeleteTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskResponse.ProtoReflect.Descriptor instead.
func (*DeleteTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 取消任务请求
type CancelTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"` // 取消原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskRequest) Reset() {
	*x = CancelTaskRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskRequest) ProtoMessage() {}

func (x *CancelTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskRequest.ProtoReflect.Descriptor instead.
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{14}
}

func (x *CancelTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CancelTaskRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 取消任务响应
type CancelTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTaskResponse) Reset() {
	*x = CancelTaskResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTaskResponse) ProtoMessage() {}

func (x *CancelTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTaskResponse.ProtoReflect.Descriptor instead.
func (*CancelTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{15}
}

func (x *CancelTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 重试任务请求
type RetryTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryTaskRequest) Reset() {
	*x = RetryTaskRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskRequest) ProtoMessage() {}

func (x *RetryTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskRequest.ProtoReflect.Descriptor instead.
func (*RetryTaskRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{16}
}

func (x *RetryTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 重试任务响应
type RetryTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NewTaskId     string                 `protobuf:"bytes,3,opt,name=new_task_id,json=newTaskId,proto3" json:"new_task_id,omitempty"` // 新创建的任务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryTaskResponse) Reset() {
	*x = RetryTaskResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTaskResponse) ProtoMessage() {}

func (x *RetryTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTaskResponse.ProtoReflect.Descriptor instead.
func (*RetryTaskResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{17}
}

func (x *RetryTaskResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RetryTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RetryTaskResponse) GetNewTaskId() string {
	if x != nil {
		return x.NewTaskId
	}
	return ""
}

// 获取任务日志请求
type GetTaskLogRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // 日志偏移量（行号）
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`   // 获取数量（默认1000行）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskLogRequest) Reset() {
	*x = GetTaskLogRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskLogRequest) ProtoMessage() {}

func (x *GetTaskLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskLogRequest.ProtoReflect.Descriptor instead.
func (*GetTaskLogRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{18}
}

func (x *GetTaskLogRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetTaskLogRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTaskLogRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// 获取任务日志响应
type GetTaskLogResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Logs          []*LogLine             `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	TotalLines    int32                  `protobuf:"varint,4,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"` // 总行数
	HasMore       bool                   `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`          // 是否还有更多日志
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskLogResponse) Reset() {
	*x = GetTaskLogResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskLogResponse) ProtoMessage() {}

func (x *GetTaskLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskLogResponse.ProtoReflect.Descriptor instead.
func (*GetTaskLogResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{19}
}

func (x *GetTaskLogResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetTaskLogResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetTaskLogResponse) GetLogs() []*LogLine {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *GetTaskLogResponse) GetTotalLines() int32 {
	if x != nil {
		return x.TotalLines
	}
	return 0
}

func (x *GetTaskLogResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// 日志行
type LogLine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LineNumber    int32                  `protobuf:"varint,1,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"` // 行号
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                     // 时间戳
	Level         string                 `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`                              // 日志级别
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                          // 日志内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{20}
}

func (x *LogLine) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *LogLine) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LogLine) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogLine) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 列出任务产物请求
type ListTaskArtifactsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTaskArtifactsRequest) Reset() {
	*x = ListTaskArtifactsRequest{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskArtifactsRequest) ProtoMessage() {}

func (x *ListTaskArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{21}
}

func (x *ListTaskArtifactsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 列出任务产物响应
type ListTaskArtifactsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Artifacts     []*Artifact            `protobuf:"bytes,3,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTaskArtifactsResponse) Reset() {
	*x = ListTaskArtifactsResponse{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskArtifactsResponse) ProtoMessage() {}

func (x *ListTaskArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskArtifactsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{22}
}

func (x *ListTaskArtifactsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListTaskArtifactsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListTaskArtifactsResponse) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

// 产物
type Artifact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArtifactId    string                 `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`    // 产物ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 产物名称
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`                                  // 产物路径
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`                                 // 文件大小（字节）
	DownloadUrl   string                 `protobuf:"bytes,5,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"` // 下载URL
	CreatedAt     int64                  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`      // 创建时间
	ExpireAt      int64                  `protobuf:"varint,7,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`         // 过期时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{23}
}

func (x *Artifact) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *Artifact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Artifact) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Artifact) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Artifact) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

func (x *Artifact) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Artifact) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

// 阶段配置
type Stage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         int32                  `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"` // 阶段序号
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    // 阶段名称
	Tasks         []*TaskConfig          `protobuf:"bytes,3,rep,name=tasks,proto3" json:"tasks,omitempty"`  // 任务配置列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stage) Reset() {
	*x = Stage{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{24}
}

func (x *Stage) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Stage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stage) GetTasks() []*TaskConfig {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 任务配置
type TaskConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                         // 任务名称
	Commands      []string               `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`                                                                 // 执行命令
	Env           map[string]string      `protobuf:"bytes,3,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 环境变量
	Workspace     string                 `protobuf:"bytes,4,opt,name=workspace,proto3" json:"workspace,omitempty"`                                                               // 工作目录
	Timeout       int32                  `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                  // 超时时间
	Tags          []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                                                         // 任务标签（已废弃，建议使用label_selector）
	Image         string                 `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`                                                                       // Docker镜像
	Artifacts     []*ArtifactConfig      `protobuf:"bytes,8,rep,name=artifacts,proto3" json:"artifacts,omitempty"`                                                               // 产物配置
	AllowFailure  bool                   `protobuf:"varint,9,opt,name=allow_failure,json=allowFailure,proto3" json:"allow_failure,omitempty"`                                    // 是否允许失败
	RetryCount    int32                  `protobuf:"varint,10,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`                                         // 重试次数
	LabelSelector *LabelSelector         `protobuf:"bytes,11,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`                                 // 标签选择器（用于匹配Agent）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskConfig) Reset() {
	*x = TaskConfig{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig) ProtoMessage() {}

func (x *TaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig.ProtoReflect.Descriptor instead.
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{25}
}

func (x *TaskConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskConfig) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *TaskConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskConfig) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *TaskConfig) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *TaskConfig) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TaskConfig) GetArtifacts() []*ArtifactConfig {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *TaskConfig) GetAllowFailure() bool {
	if x != nil {
		return x.AllowFailure
	}
	return false
}

func (x *TaskConfig) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *TaskConfig) GetLabelSelector() *LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

// 标签选择器 - 用于任务匹配Agent
type LabelSelector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 匹配所有指定的标签（AND逻辑）
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 标签表达式（支持更复杂的匹配规则）
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{26}
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

// 标签选择器要求
type LabelSelectorRequirement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                           // 标签key
	Operator      LabelOperator          `protobuf:"varint,2,opt,name=operator,proto3,enum=api.task.v1.LabelOperator" json:"operator,omitempty"` // 操作符
	Values        []string               `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`                                     // 值列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	mi := &file_api_task_v1_proto_task_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_api_task_v1_proto_task_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_api_task_v1_proto_task_proto_rawDescGZIP(), []int{27}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() LabelOperator {
	if x != nil {
		return x.Operator
	}
	return LabelOperator_LABEL_OPERATOR_UNKNOWN
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_api_task_v1_proto_task_proto protoreflect.FileDescriptor

const file_api_task_v1_proto_task_proto_rawDesc = "" +
	"\n" +
	"\x1capi/task/v1/proto/task.proto\x12\vapi.task.v1\"'\n" +
	"\vPingRequest\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"F\n" +
	"\fPingResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"\xb5\x05\n" +
	"\x11CreateTaskRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1f\n" +
	"\vpipeline_id\x18\x02 \x01(\tR\n" +
	"pipelineId\x12\x14\n" +
	"\x05stage\x18\x03 \x01(\x05R\x05stage\x12\x1a\n" +
	"\bcommands\x18\x04 \x03(\tR\bcommands\x129\n" +
	"\x03env\x18\x05 \x03(\v2'.api.task.v1.CreateTaskRequest.EnvEntryR\x03env\x12\x1c\n" +
	"\tworkspace\x18\x06 \x01(\tR\tworkspace\x12\x18\n" +
	"\atimeout\x18\a \x01(\x05R\atimeout\x12\x12\n" +
	"\x04tags\x18\b \x03(\tR\x04tags\x12\x14\n" +
	"\x05image\x18\t \x01(\tR\x05image\x12E\n" +
	"\asecrets\x18\n" +
	" \x03(\v2+.api.task.v1.CreateTaskRequest.SecretsEntryR\asecrets\x129\n" +
	"\tartifacts\x18\v \x03(\v2\x1b.api.task.v1.ArtifactConfigR\tartifacts\x12\x1d\n" +
	"\n" +
	"depends_on\x18\f \x03(\tR\tdependsOn\x12#\n" +
	"\rallow_failure\x18\r \x01(\bR\fallowFailure\x12\x1f\n" +
	"\vretry_count\x18\x0e \x01(\x05R\n" +
	"retryCount\x12A\n" +
	"\x0elabel_selector\x18\x0f \x01(\v2\x1a.api.task.v1.LabelSelectorR\rlabelSelector\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\fSecretsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x93\x01\n" +
	"\x0eArtifactConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12 \n" +
	"\vdestination\x18\x03 \x01(\tR\vdestination\x12\x16\n" +
	"\x06expire\x18\x04 \x01(\bR\x06expire\x12\x1f\n" +
	"\vexpire_days\x18\x05 \x01(\x03R\n" +
	"expireDays\"a\n" +
	"\x12CreateTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x17\n" +
	"\atask_id\x18\x03 \x01(\tR\x06taskId\")\n" +
	"\x0eGetTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"r\n" +
	"\x0fGetTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12+\n" +
	"\x04task\x18\x03 \x01(\v2\x17.api.task.v1.TaskDetailR\x04task\"\x97\b\n" +
	"\n" +
	"TaskDetail\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1f\n" +
	"\vpipeline_id\x18\x03 \x01(\tR\n" +
	"pipelineId\x12\x14\n" +
	"\x05stage\x18\x04 \x01(\x05R\x05stage\x12/\n" +
	"\x06status\x18\x05 \x01(\x0e2\x17.api.task.v1.TaskStatusR\x06status\x12\x1a\n" +
	"\bcommands\x18\x06 \x03(\tR\bcommands\x122\n" +
	"\x03env\x18\a \x03(\v2 .api.task.v1.TaskDetail.EnvEntryR\x03env\x12\x1c\n" +
	"\tworkspace\x18\b \x01(\tR\tworkspace\x12\x18\n" +
	"\atimeout\x18\t \x01(\x05R\atimeout\x12\x12\n" +
	"\x04tags\x18\n" +
	" \x03(\tR\x04tags\x12\x14\n" +
	"\x05image\x18\v \x01(\tR\x05image\x129\n" +
	"\tartifacts\x18\f \x03(\v2\x1b.api.task.v1.ArtifactConfigR\tartifacts\x12\x1d\n" +
	"\n" +
	"depends_on\x18\r \x03(\tR\tdependsOn\x12#\n" +
	"\rallow_failure\x18\x0e \x01(\bR\fallowFailure\x12\x1f\n" +
	"\vretry_count\x18\x0f \x01(\x05R\n" +
	"retryCount\x12#\n" +
	"\rretried_times\x18\x10 \x01(\x05R\fretriedTimes\x12\x19\n" +
	"\bagent_id\x18\x11 \x01(\tR\aagentId\x12\x1b\n" +
	"\texit_code\x18\x12 \x01(\x05R\bexitCode\x12#\n" +
	"\rerror_message\x18\x13 \x01(\tR\ferrorMessage\x12\x1d\n" +
	"\n" +
	"created_at\x18\x14 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"started_at\x18\x15 \x01(\x03R\tstartedAt\x12\x1f\n" +
	"\vfinished_at\x18\x16 \x01(\x03R\n" +
	"finishedAt\x12\x1a\n" +
	"\bduration\x18\x17 \x01(\x03R\bduration\x12\x1d\n" +
	"\n" +
	"created_by\x18\x18 \x01(\tR\tcreatedBy\x12A\n" +
	"\x0elabel_selector\x18\x19 \x01(\v2\x1a.api.task.v1.LabelSelectorR\rlabelSelector\x12K\n" +
	"\fagent_labels\x18\x1a \x03(\v2(.api.task.v1.TaskDetail.AgentLabelsEntryR\vagentLabels\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10AgentLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe6\x01\n" +
	"\x10ListTasksRequest\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12/\n" +
	"\x06status\x18\x02 \x01(\x0e2\x17.api.task.v1.TaskStatusR\x06status\x12\x19\n" +
	"\bagent_id\x18\x03 \x01(\tR\aagentId\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\x12\x17\n" +
	"\asort_by\x18\x06 \x01(\tR\x06sortBy\x12\x1b\n" +
	"\tsort_desc\x18\a \x01(\bR\bsortDesc\"\xbd\x01\n" +
	"\x11ListTasksResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12-\n" +
	"\x05tasks\x18\x03 \x03(\v2\x17.api.task.v1.TaskDetailR\x05tasks\x12\x14\n" +
	"\x05total\x18\x04 \x01(\x05R\x05total\x12\x12\n" +
	"\x04page\x18\x05 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\"\xfd\x01\n" +
	"\x11UpdateTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bcommands\x18\x03 \x03(\tR\bcommands\x129\n" +
	"\x03env\x18\x04 \x03(\v2'.api.task.v1.UpdateTaskRequest.EnvEntryR\x03env\x12\x18\n" +
	"\atimeout\x18\x05 \x01(\x05R\atimeout\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"H\n" +
	"\x12UpdateTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\",\n" +
	"\x11DeleteTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"H\n" +
	"\x12DeleteTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"D\n" +
	"\x11CancelTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"H\n" +
	"\x12CancelTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"+\n" +
	"\x10RetryTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"g\n" +
	"\x11RetryTaskResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1e\n" +
	"\vnew_task_id\x18\x03 \x01(\tR\tnewTaskId\"Z\n" +
	"\x11GetTaskLogRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x05R\x06offset\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\"\xae\x01\n" +
	"\x12GetTaskLogResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12(\n" +
	"\x04logs\x18\x03 \x03(\v2\x14.api.task.v1.LogLineR\x04logs\x12\x1f\n" +
	"\vtotal_lines\x18\x04 \x01(\x05R\n" +
	"totalLines\x12\x19\n" +
	"\bhas_more\x18\x05 \x01(\bR\ahasMore\"x\n" +
	"\aLogLine\x12\x1f\n" +
	"\vline_number\x18\x01 \x01(\x05R\n" +
	"lineNumber\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12\x14\n" +
	"\x05level\x18\x03 \x01(\tR\x05level\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\"3\n" +
	"\x18ListTaskArtifactsRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\"\x84\x01\n" +
	"\x19ListTaskArtifactsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x123\n" +
	"\tartifacts\x18\x03 \x03(\v2\x15.api.task.v1.ArtifactR\tartifacts\"\xc6\x01\n" +
	"\bArtifact\x12\x1f\n" +
	"\vartifact_id\x18\x01 \x01(\tR\n" +
	"artifactId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12!\n" +
	"\fdownload_url\x18\x05 \x01(\tR\vdownloadUrl\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\x03R\tcreatedAt\x12\x1b\n" +
	"\texpire_at\x18\a \x01(\x03R\bexpireAt\"`\n" +
	"\x05Stage\x12\x14\n" +
	"\x05order\x18\x01 \x01(\x05R\x05order\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12-\n" +
	"\x05tasks\x18\x03 \x03(\v2\x17.api.task.v1.TaskConfigR\x05tasks\"\xce\x03\n" +
	"\n" +
	"TaskConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bcommands\x18\x02 \x03(\tR\bcommands\x122\n" +
	"\x03env\x18\x03 \x03(\v2 .api.task.v1.TaskConfig.EnvEntryR\x03env\x12\x1c\n" +
	"\tworkspace\x18\x04 \x01(\tR\tworkspace\x12\x18\n" +
	"\atimeout\x18\x05 \x01(\x05R\atimeout\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x12\x14\n" +
	"\x05image\x18\a \x01(\tR\x05image\x129\n" +
	"\tartifacts\x18\b \x03(\v2\x1b.api.task.v1.ArtifactConfigR\tartifacts\x12#\n" +
	"\rallow_failure\x18\t \x01(\bR\fallowFailure\x12\x1f\n" +
	"\vretry_count\x18\n" +
	" \x01(\x05R\n" +
	"retryCount\x12A\n" +
	"\x0elabel_selector\x18\v \x01(\v2\x1a.api.task.v1.LabelSelectorR\rlabelSelector\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf3\x01\n" +
	"\rLabelSelector\x12N\n" +
	"\fmatch_labels\x18\x01 \x03(\v2+.api.task.v1.LabelSelector.MatchLabelsEntryR\vmatchLabels\x12R\n" +
	"\x11match_expressions\x18\x02 \x03(\v2%.api.task.v1.LabelSelectorRequirementR\x10matchExpressions\x1a>\n" +
	"\x10MatchLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"|\n" +
	"\x18LabelSelectorRequirement\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\boperator\x18\x02 \x01(\x0e2\x1a.api.task.v1.LabelOperatorR\boperator\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values*\xed\x01\n" +
	"\n" +
	"TaskStatus\x12\x17\n" +
	"\x13TASK_STATUS_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13TASK_STATUS_PENDING\x10\x01\x12\x16\n" +
	"\x12TASK_STATUS_QUEUED\x10\x02\x12\x17\n" +
	"\x13TASK_STATUS_RUNNING\x10\x03\x12\x17\n" +
	"\x13TASK_STATUS_SUCCESS\x10\x04\x12\x16\n" +
	"\x12TASK_STATUS_FAILED\x10\x05\x12\x19\n" +
	"\x15TASK_STATUS_CANCELLED\x10\x06\x12\x17\n" +
	"\x13TASK_STATUS_TIMEOUT\x10\a\x12\x17\n" +
	"\x13TASK_STATUS_SKIPPED\x10\b*\x8b\x01\n" +
	"\vTriggerType\x12\x18\n" +
	"\x14TRIGGER_TYPE_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13TRIGGER_TYPE_MANUAL\x10\x01\x12\x18\n" +
	"\x14TRIGGER_TYPE_WEBHOOK\x10\x02\x12\x19\n" +
	"\x15TRIGGER_TYPE_SCHEDULE\x10\x03\x12\x14\n" +
	"\x10TRIGGER_TYPE_API\x10\x04*\xc5\x01\n" +
	"\rLabelOperator\x12\x1a\n" +
	"\x16LABEL_OPERATOR_UNKNOWN\x10\x00\x12\x15\n" +
	"\x11LABEL_OPERATOR_IN\x10\x01\x12\x19\n" +
	"\x15LABEL_OPERATOR_NOT_IN\x10\x02\x12\x19\n" +
	"\x15LABEL_OPERATOR_EXISTS\x10\x03\x12\x1d\n" +
	"\x19LABEL_OPERATOR_NOT_EXISTS\x10\x04\x12\x15\n" +
	"\x11LABEL_OPERATOR_GT\x10\x05\x12\x15\n" +
	"\x11LABEL_OPERATOR_LT\x10\x062\xa4\x06\n" +
	"\x04Task\x12=\n" +
	"\x04Ping\x12\x18.api.task.v1.PingRequest\x1a\x19.api.task.v1.PingResponse\"\x00\x12O\n" +
	"\n" +
	"CreateTask\x12\x1e.api.task.v1.CreateTaskRequest\x1a\x1f.api.task.v1.CreateTaskResponse\"\x00\x12F\n" +
	"\aGetTask\x12\x1b.api.task.v1.GetTaskRequest\x1a\x1c.api.task.v1.GetTaskResponse\"\x00\x12L\n" +
	"\tListTasks\x12\x1d.api.task.v1.ListTasksRequest\x1a\x1e.api.task.v1.ListTasksResponse\"\x00\x12O\n" +
	"\n" +
	"UpdateTask\x12\x1e.api.task.v1.UpdateTaskRequest\x1a\x1f.api.task.v1.UpdateTaskResponse\"\x00\x12O\n" +
	"\n" +
	"DeleteTask\x12\x1e.api.task.v1.DeleteTaskRequest\x1a\x1f.api.task.v1.DeleteTaskResponse\"\x00\x12O\n" +
	"\n" +
	"CancelTask\x12\x1e.api.task.v1.CancelTaskRequest\x1a\x1f.api.task.v1.CancelTaskResponse\"\x00\x12L\n" +
	"\tRetryTask\x12\x1d.api.task.v1.RetryTaskRequest\x1a\x1e.api.task.v1.RetryTaskResponse\"\x00\x12O\n" +
	"\n" +
	"GetTaskLog\x12\x1e.api.task.v1.GetTaskLogRequest\x1a\x1f.api.task.v1.GetTaskLogResponse\"\x00\x12d\n" +
	"\x11ListTaskArtifacts\x12%.api.task.v1.ListTaskArtifactsRequest\x1a&.api.task.v1.ListTaskArtifactsResponse\"\x00B-Z+github.com/observabil/arcade/api/task/v1;v1b\x06proto3"

var (
	file_api_task_v1_proto_task_proto_rawDescOnce sync.Once
	file_api_task_v1_proto_task_proto_rawDescData []byte
)

func file_api_task_v1_proto_task_proto_rawDescGZIP() []byte {
	file_api_task_v1_proto_task_proto_rawDescOnce.Do(func() {
		file_api_task_v1_proto_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_task_v1_proto_task_proto_rawDesc), len(file_api_task_v1_proto_task_proto_rawDesc)))
	})
	return file_api_task_v1_proto_task_proto_rawDescData
}

var file_api_task_v1_proto_task_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_task_v1_proto_task_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_api_task_v1_proto_task_proto_goTypes = []any{
	(TaskStatus)(0),                   // 0: api.task.v1.TaskStatus
	(TriggerType)(0),                  // 1: api.task.v1.TriggerType
	(LabelOperator)(0),                // 2: api.task.v1.LabelOperator
	(*PingRequest)(nil),               // 3: api.task.v1.PingRequest
	(*PingResponse)(nil),              // 4: api.task.v1.PingResponse
	(*CreateTaskRequest)(nil),         // 5: api.task.v1.CreateTaskRequest
	(*ArtifactConfig)(nil),            // 6: api.task.v1.ArtifactConfig
	(*CreateTaskResponse)(nil),        // 7: api.task.v1.CreateTaskResponse
	(*GetTaskRequest)(nil),            // 8: api.task.v1.GetTaskRequest
	(*GetTaskResponse)(nil),           // 9: api.task.v1.GetTaskResponse
	(*TaskDetail)(nil),                // 10: api.task.v1.TaskDetail
	(*ListTasksRequest)(nil),          // 11: api.task.v1.ListTasksRequest
	(*ListTasksResponse)(nil),         // 12: api.task.v1.ListTasksResponse
	(*UpdateTaskRequest)(nil),         // 13: api.task.v1.UpdateTaskRequest
	(*UpdateTaskResponse)(nil),        // 14: api.task.v1.UpdateTaskResponse
	(*DeleteTaskRequest)(nil),         // 15: api.task.v1.DeleteTaskRequest
	(*DeleteTaskResponse)(nil),        // 16: api.task.v1.DeleteTaskResponse
	(*CancelTaskRequest)(nil),         // 17: api.task.v1.CancelTaskRequest
	(*CancelTaskResponse)(nil),        // 18: api.task.v1.CancelTaskResponse
	(*RetryTaskRequest)(nil),          // 19: api.task.v1.RetryTaskRequest
	(*RetryTaskResponse)(nil),         // 20: api.task.v1.RetryTaskResponse
	(*GetTaskLogRequest)(nil),         // 21: api.task.v1.GetTaskLogRequest
	(*GetTaskLogResponse)(nil),        // 22: api.task.v1.GetTaskLogResponse
	(*LogLine)(nil),                   // 23: api.task.v1.LogLine
	(*ListTaskArtifactsRequest)(nil),  // 24: api.task.v1.ListTaskArtifactsRequest
	(*ListTaskArtifactsResponse)(nil), // 25: api.task.v1.ListTaskArtifactsResponse
	(*Artifact)(nil),                  // 26: api.task.v1.Artifact
	(*Stage)(nil),                     // 27: api.task.v1.Stage
	(*TaskConfig)(nil),                // 28: api.task.v1.TaskConfig
	(*LabelSelector)(nil),             // 29: api.task.v1.LabelSelector
	(*LabelSelectorRequirement)(nil),  // 30: api.task.v1.LabelSelectorRequirement
	nil,                               // 31: api.task.v1.CreateTaskRequest.EnvEntry
	nil,                               // 32: api.task.v1.CreateTaskRequest.SecretsEntry
	nil,                               // 33: api.task.v1.TaskDetail.EnvEntry
	nil,                               // 34: api.task.v1.TaskDetail.AgentLabelsEntry
	nil,                               // 35: api.task.v1.UpdateTaskRequest.EnvEntry
	nil,                               // 36: api.task.v1.TaskConfig.EnvEntry
	nil,                               // 37: api.task.v1.LabelSelector.MatchLabelsEntry
}
var file_api_task_v1_proto_task_proto_depIdxs = []int32{
	31, // 0: api.task.v1.CreateTaskRequest.env:type_name -> api.task.v1.CreateTaskRequest.EnvEntry
	32, // 1: api.task.v1.CreateTaskRequest.secrets:type_name -> api.task.v1.CreateTaskRequest.SecretsEntry
	6,  // 2: api.task.v1.CreateTaskRequest.artifacts:type_name -> api.task.v1.ArtifactConfig
	29, // 3: api.task.v1.CreateTaskRequest.label_selector:type_name -> api.task.v1.LabelSelector
	10, // 4: api.task.v1.GetTaskResponse.task:type_name -> api.task.v1.TaskDetail
	0,  // 5: api.task.v1.TaskDetail.status:type_name -> api.task.v1.TaskStatus
	33, // 6: api.task.v1.TaskDetail.env:type_name -> api.task.v1.TaskDetail.EnvEntry
	6,  // 7: api.task.v1.TaskDetail.artifacts:type_name -> api.task.v1.ArtifactConfig
	29, // 8: api.task.v1.TaskDetail.label_selector:type_name -> api.task.v1.LabelSelector
	34, // 9: api.task.v1.TaskDetail.agent_labels:type_name -> api.task.v1.TaskDetail.AgentLabelsEntry
	0,  // 10: api.task.v1.ListTasksRequest.status:type_name -> api.task.v1.TaskStatus
	10, // 11: api.task.v1.ListTasksResponse.tasks:type_name -> api.task.v1.TaskDetail
	35, // 12: api.task.v1.UpdateTaskRequest.env:type_name -> api.task.v1.UpdateTaskRequest.EnvEntry
	23, // 13: api.task.v1.GetTaskLogResponse.logs:type_name -> api.task.v1.LogLine
	26, // 14: api.task.v1.ListTaskArtifactsResponse.artifacts:type_name -> api.task.v1.Artifact
	28, // 15: api.task.v1.Stage.tasks:type_name -> api.task.v1.TaskConfig
	36, // 16: api.task.v1.TaskConfig.env:type_name -> api.task.v1.TaskConfig.EnvEntry
	6,  // 17: api.task.v1.TaskConfig.artifacts:type_name -> api.task.v1.ArtifactConfig
	29, // 18: api.task.v1.TaskConfig.label_selector:type_name -> api.task.v1.LabelSelector
	37, // 19: api.task.v1.LabelSelector.match_labels:type_name -> api.task.v1.LabelSelector.MatchLabelsEntry
	30, // 20: api.task.v1.LabelSelector.match_expressions:type_name -> api.task.v1.LabelSelectorRequirement
	2,  // 21: api.task.v1.LabelSelectorRequirement.operator:type_name -> api.task.v1.LabelOperator
	3,  // 22: api.task.v1.Task.Ping:input_type -> api.task.v1.PingRequest
	5,  // 23: api.task.v1.Task.CreateTask:input_type -> api.task.v1.CreateTaskRequest
	8,  // 24: api.task.v1.Task.GetTask:input_type -> api.task.v1.GetTaskRequest
	11, // 25: api.task.v1.Task.ListTasks:input_type -> api.task.v1.ListTasksRequest
	13, // 26: api.task.v1.Task.UpdateTask:input_type -> api.task.v1.UpdateTaskRequest
	15, // 27: api.task.v1.Task.DeleteTask:input_type -> api.task.v1.DeleteTaskRequest
	17, // 28: api.task.v1.Task.CancelTask:input_type -> api.task.v1.CancelTaskRequest
	19, // 29: api.task.v1.Task.RetryTask:input_type -> api.task.v1.RetryTaskRequest
	21, // 30: api.task.v1.Task.GetTaskLog:input_type -> api.task.v1.GetTaskLogRequest
	24, // 31: api.task.v1.Task.ListTaskArtifacts:input_type -> api.task.v1.ListTaskArtifactsRequest
	4,  // 32: api.task.v1.Task.Ping:output_type -> api.task.v1.PingResponse
	7,  // 33: api.task.v1.Task.CreateTask:output_type -> api.task.v1.CreateTaskResponse
	9,  // 34: api.task.v1.Task.GetTask:output_type -> api.task.v1.GetTaskResponse
	12, // 35: api.task.v1.Task.ListTasks:output_type -> api.task.v1.ListTasksResponse
	14, // 36: api.task.v1.Task.UpdateTask:output_type -> api.task.v1.UpdateTaskResponse
	16, // 37: api.task.v1.Task.DeleteTask:output_type -> api.task.v1.DeleteTaskResponse
	18, // 38: api.task.v1.Task.CancelTask:output_type -> api.task.v1.CancelTaskResponse
	20, // 39: api.task.v1.Task.RetryTask:output_type -> api.task.v1.RetryTaskResponse
	22, // 40: api.task.v1.Task.GetTaskLog:output_type -> api.task.v1.GetTaskLogResponse
	25, // 41: api.task.v1.Task.ListTaskArtifacts:output_type -> api.task.v1.ListTaskArtifactsResponse
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_api_task_v1_proto_task_proto_init() }
func file_api_task_v1_proto_task_proto_init() {
	if File_api_task_v1_proto_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_task_v1_proto_task_proto_rawDesc), len(file_api_task_v1_proto_task_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_task_v1_proto_task_proto_goTypes,
		DependencyIndexes: file_api_task_v1_proto_task_proto_depIdxs,
		EnumInfos:         file_api_task_v1_proto_task_proto_enumTypes,
		MessageInfos:      file_api_task_v1_proto_task_proto_msgTypes,
	}.Build()
	File_api_task_v1_proto_task_proto = out.File
	file_api_task_v1_proto_task_proto_goTypes = nil
	file_api_task_v1_proto_task_proto_depIdxs = nil
}
