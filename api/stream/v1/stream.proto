syntax = "proto3";

package stream.v1;

import "task/v1/task.proto";
import "agent/v1/agent.proto";
import "pipeline/v1/pipeline.proto";

option go_package = "github.com/go-arcade/arcade/api/stream/v1;streamv1";

// StreamService - Real-time data streaming interface
service StreamService {
  // Ping service health check
  rpc Ping(PingRequest) returns (PingResponse) {}

  // Stream task logs in real-time - Server-side streaming pushes logs to client
  rpc StreamTaskLog(StreamTaskLogRequest) returns (stream StreamTaskLogResponse) {}

  // Upload task log stream - Agent-side streaming uploads logs to Server
  rpc UploadTaskLog(stream UploadTaskLogRequest) returns (UploadTaskLogResponse) {}

  // Stream task status in real-time - Server-side streaming pushes task status changes
  rpc StreamTaskStatus(StreamTaskStatusRequest) returns (stream StreamTaskStatusResponse) {}

  // Stream pipeline status in real-time - Server-side streaming pushes pipeline status changes
  rpc StreamPipelineStatus(StreamPipelineStatusRequest) returns (stream StreamPipelineStatusResponse) {}

  // Bidirectional communication channel between Agent and Server - For real-time task scheduling and control
  rpc AgentChannel(stream AgentChannelRequest) returns (stream AgentChannelResponse) {}

  // Monitor agent status in real-time - Server-side streaming pushes agent status changes
  rpc StreamAgentStatus(StreamAgentStatusRequest) returns (stream StreamAgentStatusResponse) {}

  // Real-time event stream - Server pushes system events
  rpc StreamEvents(StreamEventsRequest) returns (stream StreamEventsResponse) {}
}

// Agent status enum
enum AgentStatus {
  AGENT_STATUS_UNSPECIFIED = 0;
  AGENT_STATUS_ONLINE = 1;   // Online
  AGENT_STATUS_OFFLINE = 2;  // Offline
  AGENT_STATUS_BUSY = 3;     // Busy
  AGENT_STATUS_IDLE = 4;     // Idle
}

// Event type enum
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_JOB_CREATED = 1;       // Job created
  EVENT_TYPE_JOB_STARTED = 2;       // Job started
  EVENT_TYPE_JOB_COMPLETED = 3;     // Job completed
  EVENT_TYPE_JOB_FAILED = 4;        // Job failed
  EVENT_TYPE_JOB_CANCELLED = 5;     // Job cancelled
  EVENT_TYPE_PIPELINE_STARTED = 6;  // Pipeline started
  EVENT_TYPE_PIPELINE_COMPLETED = 7; // Pipeline completed
  EVENT_TYPE_PIPELINE_FAILED = 8;   // Pipeline failed
  EVENT_TYPE_AGENT_REGISTERED = 9;  // Agent registered
  EVENT_TYPE_AGENT_UNREGISTERED = 10; // Agent unregistered
  EVENT_TYPE_AGENT_OFFLINE = 11;    // Agent offline
}

message PingRequest {
    string message = 1;
}

message PingResponse {
    string message = 1;
    int64 timestamp = 2;
}

// ============ Task Log Stream Related ============

// Request to stream task logs in real-time
message StreamTaskLogRequest {
  string job_id = 1;                    // Job ID
  int32 from_line = 2;                  // Starting line number (0 means from beginning)
  bool follow = 3;                      // Whether to continuously track (similar to tail -f)
}

// Response for streaming task logs in real-time
message StreamTaskLogResponse {
  string task_id = 1;
  LogChunk log_chunk = 2;               // Log chunk
  bool is_complete = 3;                 // Whether log transmission is complete
}

// Log chunk
message LogChunk {
  int64 timestamp = 1;                  // Timestamp (milliseconds)
  int32 line_number = 2;                // Line number
  string level = 3;                     // Log level (info, warn, error, debug)
  string content = 4;                   // Log content
  string stream = 5;                    // Stream type (stdout, stderr)
}

// Request to upload task log stream
message UploadTaskLogRequest {
  string task_id = 1;
  string agent_id = 2;
  repeated LogChunk logs = 3;           // List of log chunks
}

// Response for uploading task log stream
message UploadTaskLogResponse {
  bool success = 1;
  string message = 2;
  int32 received_lines = 3;             // Number of log lines received
}

// ============ Task Status Stream Related ============

// Request to stream task status in real-time
message StreamTaskStatusRequest {
  repeated string task_ids = 1;          // List of task IDs (empty means monitor all tasks)
  string pipeline_id = 2;               // Pipeline ID (optional, monitor all tasks in a specific pipeline)
}

// Response for streaming task status in real-time
message StreamTaskStatusResponse {
  string task_id = 1;
  string task_name = 2;
  task.v1.TaskStatus status = 3;                 // Task status
  task.v1.TaskStatus previous_status = 4;        // Previous status
  int64 timestamp = 5;                  // Status change timestamp
  string agent_id = 6;                  // Executing agent ID
  int32 exit_code = 7;                  // Exit code
  string error_message = 8;             // Error message
  int64 duration = 9;                   // Execution duration (milliseconds)
  map<string, string> metrics = 10;     // Execution metrics
}

// ============ Pipeline Status Stream Related ============

// Request to stream pipeline status in real-time
message StreamPipelineStatusRequest {
  repeated string pipeline_ids = 1;     // List of pipeline IDs (empty means monitor all pipelines)
}

// Response for streaming pipeline status in real-time
message StreamPipelineStatusResponse {
  string pipeline_id = 1;
  string run_id = 2;                    // Pipeline run ID
  string pipeline_name = 3;
  pipeline.v1.PipelineStatus status = 4;            // Pipeline status
  pipeline.v1.PipelineStatus previous_status = 5;   // Previous status
  int64 timestamp = 6;                  // Status change timestamp
  int32 total_jobs = 7;                 // Total number of jobs
  int32 completed_jobs = 8;             // Number of completed jobs
  int32 failed_jobs = 9;                // Number of failed jobs
  int32 running_jobs = 10;              // Number of running jobs
  int32 current_stage = 11;             // Current stage
  int32 total_stages = 12;              // Total number of stages
  int64 duration = 13;                  // Execution duration (milliseconds)
}

// ============ Agent Channel Related ============

// Agent channel request (bidirectional stream)
message AgentChannelRequest {
  string agent_id = 1;
  string request_id = 2;                // Request ID (for matching requests and responses)
  oneof payload {
    HeartbeatData heartbeat = 3;        // Heartbeat data
    TaskStatusUpdate task_status = 4;     // Task status update
    LogData log_data = 5;               // Log data
    TaskFetchRequest task_fetch = 6;      // Task fetch request
    AgentMetrics metrics = 7;           // Agent metrics
  }
}

// Heartbeat data
message HeartbeatData {
  int64 timestamp = 1;
  agent.v1.AgentStatus status = 2;
  int32 running_jobs_count = 3;
  int32 max_concurrent_jobs = 4;
}

// Task status update
message TaskStatusUpdate {
  string task_id = 1;
  task.v1.TaskStatus status = 2;
  int32 exit_code = 3;
  string error_message = 4;
  int64 timestamp = 5;
}

// Log data
message LogData {
  string job_id = 1;
  repeated LogChunk logs = 2;
}

// Task fetch request
message TaskFetchRequest {
  int32 max_tasks = 1;
}

// Agent metrics
message AgentMetrics {
  double cpu_usage = 1;                 // CPU usage (percentage)
  double memory_usage = 2;              // Memory usage (percentage)
  double disk_usage = 3;                // Disk usage (percentage)
  int32 running_tasks = 4;               // Number of running tasks
  map<string, string> custom_metrics = 5; // Custom metrics
}

// Agent channel response (bidirectional stream)
message AgentChannelResponse {
  string agent_id = 1;
  string response_id = 2;               // Response ID (corresponding to request ID)
  oneof payload {
    HeartbeatAck heartbeat_ack = 3;     // Heartbeat acknowledgment
    TaskAssignment task_assignment = 4;   // Task assignment
    TaskCancelCommand task_cancel_command = 5; // Task cancellation command
    ConfigUpdate config_update = 6;     // Configuration update
  }
}

// Heartbeat acknowledgment
message HeartbeatAck {
  int64 server_time = 1;
  bool success = 2;
}

// Task assignment
message TaskAssignment {
  repeated TaskInfo tasks = 1;
}

// Task information
message TaskInfo {
  string task_id = 1;
  string name = 2;
  string pipeline_id = 3;
  int32 stage = 4;
  repeated string commands = 5;
  map<string, string> env = 6;
  string workspace = 7;
  int32 timeout = 8;
  string image = 9;
  map<string, string> secrets = 10;
}

// Task cancellation command
message TaskCancelCommand {
  string task_id = 1;
  string reason = 2;
}

// Configuration update
message ConfigUpdate {
  int64 heartbeat_interval = 1;         // Heartbeat interval
  int32 max_concurrent_jobs = 2;        // Maximum concurrent jobs
  map<string, string> config = 3;       // Other configuration
}

// ============ Agent Status Stream Related ============

// Request to monitor agent status stream in real-time
message StreamAgentStatusRequest {
  repeated string agent_ids = 1;        // List of agent IDs (empty means monitor all agents)
}

// Response for monitoring agent status stream in real-time
message StreamAgentStatusResponse {
  string agent_id = 1;
  string hostname = 2;
  string ip = 3;
  AgentStatus status = 4;               // Agent status
  AgentStatus previous_status = 5;      // Previous status
  int64 timestamp = 6;                  // Status change timestamp
  int32 running_jobs_count = 7;         // Number of running jobs
  int32 max_concurrent_jobs = 8;        // Maximum concurrent jobs
  AgentMetrics metrics = 9;             // Agent metrics
  int64 last_heartbeat = 10;            // Last heartbeat time
  map<string, string> labels = 11;      // Agent labels
}

// ============ Event Stream Related ============

// Request for real-time event stream
message StreamEventsRequest {
  repeated EventType event_types = 1;   // Event types to watch (empty means receive all events)
  repeated string resource_ids = 2;     // Resource IDs to watch (job_id, pipeline_id, etc.)
}

// Response for real-time event stream
message StreamEventsResponse {
  string event_id = 1;                  // Event ID
  EventType event_type = 2;             // Event type
  int64 timestamp = 3;                  // Event timestamp
  string resource_id = 4;               // Resource ID
  string resource_type = 5;             // Resource type (job, pipeline, agent, etc.)
  string title = 6;                     // Event title
  string description = 7;               // Event description
  map<string, string> metadata = 8;     // Event metadata
  string user_id = 9;                   // User ID who triggered the event
}
