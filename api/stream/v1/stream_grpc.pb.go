// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: stream/v1/stream.proto

package streamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamService_Ping_FullMethodName                 = "/stream.v1.StreamService/Ping"
	StreamService_StreamTaskLog_FullMethodName        = "/stream.v1.StreamService/StreamTaskLog"
	StreamService_UploadTaskLog_FullMethodName        = "/stream.v1.StreamService/UploadTaskLog"
	StreamService_StreamTaskStatus_FullMethodName     = "/stream.v1.StreamService/StreamTaskStatus"
	StreamService_StreamPipelineStatus_FullMethodName = "/stream.v1.StreamService/StreamPipelineStatus"
	StreamService_AgentChannel_FullMethodName         = "/stream.v1.StreamService/AgentChannel"
	StreamService_StreamAgentStatus_FullMethodName    = "/stream.v1.StreamService/StreamAgentStatus"
	StreamService_StreamEvents_FullMethodName         = "/stream.v1.StreamService/StreamEvents"
)

// StreamServiceClient is the client API for StreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Stream服务 - 实时数据流传输接口
type StreamServiceClient interface {
	// ping
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// 实时获取任务日志流 - Server端流式推送日志给客户端
	StreamTaskLog(ctx context.Context, in *StreamTaskLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskLogResponse], error)
	// 上报任务日志流 - Agent端流式上报日志给Server
	UploadTaskLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadTaskLogRequest, UploadTaskLogResponse], error)
	// 实时获取任务状态流 - Server端流式推送任务状态变化
	StreamTaskStatus(ctx context.Context, in *StreamTaskStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskStatusResponse], error)
	// 实时获取流水线状态流 - Server端流式推送流水线状态变化
	StreamPipelineStatus(ctx context.Context, in *StreamPipelineStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPipelineStatusResponse], error)
	// Agent与Server双向通信流 - 用于实时任务调度和控制
	AgentChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentChannelRequest, AgentChannelResponse], error)
	// 实时监控Agent状态流 - Server端流式推送Agent状态变化
	StreamAgentStatus(ctx context.Context, in *StreamAgentStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAgentStatusResponse], error)
	// 实时事件流 - Server端推送系统事件
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error)
}

type streamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServiceClient(cc grpc.ClientConnInterface) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, StreamService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServiceClient) StreamTaskLog(ctx context.Context, in *StreamTaskLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[0], StreamService_StreamTaskLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTaskLogRequest, StreamTaskLogResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamTaskLogClient = grpc.ServerStreamingClient[StreamTaskLogResponse]

func (c *streamServiceClient) UploadTaskLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadTaskLogRequest, UploadTaskLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[1], StreamService_UploadTaskLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadTaskLogRequest, UploadTaskLogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_UploadTaskLogClient = grpc.ClientStreamingClient[UploadTaskLogRequest, UploadTaskLogResponse]

func (c *streamServiceClient) StreamTaskStatus(ctx context.Context, in *StreamTaskStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[2], StreamService_StreamTaskStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTaskStatusRequest, StreamTaskStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamTaskStatusClient = grpc.ServerStreamingClient[StreamTaskStatusResponse]

func (c *streamServiceClient) StreamPipelineStatus(ctx context.Context, in *StreamPipelineStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPipelineStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[3], StreamService_StreamPipelineStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPipelineStatusRequest, StreamPipelineStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamPipelineStatusClient = grpc.ServerStreamingClient[StreamPipelineStatusResponse]

func (c *streamServiceClient) AgentChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentChannelRequest, AgentChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[4], StreamService_AgentChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentChannelRequest, AgentChannelResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_AgentChannelClient = grpc.BidiStreamingClient[AgentChannelRequest, AgentChannelResponse]

func (c *streamServiceClient) StreamAgentStatus(ctx context.Context, in *StreamAgentStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAgentStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[5], StreamService_StreamAgentStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAgentStatusRequest, StreamAgentStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamAgentStatusClient = grpc.ServerStreamingClient[StreamAgentStatusResponse]

func (c *streamServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamService_ServiceDesc.Streams[6], StreamService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, StreamEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamEventsClient = grpc.ServerStreamingClient[StreamEventsResponse]

// StreamServiceServer is the server API for StreamService service.
// All implementations must embed UnimplementedStreamServiceServer
// for forward compatibility.
//
// Stream服务 - 实时数据流传输接口
type StreamServiceServer interface {
	// ping
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// 实时获取任务日志流 - Server端流式推送日志给客户端
	StreamTaskLog(*StreamTaskLogRequest, grpc.ServerStreamingServer[StreamTaskLogResponse]) error
	// 上报任务日志流 - Agent端流式上报日志给Server
	UploadTaskLog(grpc.ClientStreamingServer[UploadTaskLogRequest, UploadTaskLogResponse]) error
	// 实时获取任务状态流 - Server端流式推送任务状态变化
	StreamTaskStatus(*StreamTaskStatusRequest, grpc.ServerStreamingServer[StreamTaskStatusResponse]) error
	// 实时获取流水线状态流 - Server端流式推送流水线状态变化
	StreamPipelineStatus(*StreamPipelineStatusRequest, grpc.ServerStreamingServer[StreamPipelineStatusResponse]) error
	// Agent与Server双向通信流 - 用于实时任务调度和控制
	AgentChannel(grpc.BidiStreamingServer[AgentChannelRequest, AgentChannelResponse]) error
	// 实时监控Agent状态流 - Server端流式推送Agent状态变化
	StreamAgentStatus(*StreamAgentStatusRequest, grpc.ServerStreamingServer[StreamAgentStatusResponse]) error
	// 实时事件流 - Server端推送系统事件
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error
	mustEmbedUnimplementedStreamServiceServer()
}

// UnimplementedStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServiceServer struct{}

func (UnimplementedStreamServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStreamServiceServer) StreamTaskLog(*StreamTaskLogRequest, grpc.ServerStreamingServer[StreamTaskLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskLog not implemented")
}
func (UnimplementedStreamServiceServer) UploadTaskLog(grpc.ClientStreamingServer[UploadTaskLogRequest, UploadTaskLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadTaskLog not implemented")
}
func (UnimplementedStreamServiceServer) StreamTaskStatus(*StreamTaskStatusRequest, grpc.ServerStreamingServer[StreamTaskStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskStatus not implemented")
}
func (UnimplementedStreamServiceServer) StreamPipelineStatus(*StreamPipelineStatusRequest, grpc.ServerStreamingServer[StreamPipelineStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPipelineStatus not implemented")
}
func (UnimplementedStreamServiceServer) AgentChannel(grpc.BidiStreamingServer[AgentChannelRequest, AgentChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AgentChannel not implemented")
}
func (UnimplementedStreamServiceServer) StreamAgentStatus(*StreamAgentStatusRequest, grpc.ServerStreamingServer[StreamAgentStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentStatus not implemented")
}
func (UnimplementedStreamServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedStreamServiceServer) mustEmbedUnimplementedStreamServiceServer() {}
func (UnimplementedStreamServiceServer) testEmbeddedByValue()                       {}

// UnsafeStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServiceServer will
// result in compilation errors.
type UnsafeStreamServiceServer interface {
	mustEmbedUnimplementedStreamServiceServer()
}

func RegisterStreamServiceServer(s grpc.ServiceRegistrar, srv StreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamService_ServiceDesc, srv)
}

func _StreamService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamService_StreamTaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTaskLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamTaskLog(m, &grpc.GenericServerStream[StreamTaskLogRequest, StreamTaskLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamTaskLogServer = grpc.ServerStreamingServer[StreamTaskLogResponse]

func _StreamService_UploadTaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).UploadTaskLog(&grpc.GenericServerStream[UploadTaskLogRequest, UploadTaskLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_UploadTaskLogServer = grpc.ClientStreamingServer[UploadTaskLogRequest, UploadTaskLogResponse]

func _StreamService_StreamTaskStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTaskStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamTaskStatus(m, &grpc.GenericServerStream[StreamTaskStatusRequest, StreamTaskStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamTaskStatusServer = grpc.ServerStreamingServer[StreamTaskStatusResponse]

func _StreamService_StreamPipelineStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPipelineStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamPipelineStatus(m, &grpc.GenericServerStream[StreamPipelineStatusRequest, StreamPipelineStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamPipelineStatusServer = grpc.ServerStreamingServer[StreamPipelineStatusResponse]

func _StreamService_AgentChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).AgentChannel(&grpc.GenericServerStream[AgentChannelRequest, AgentChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_AgentChannelServer = grpc.BidiStreamingServer[AgentChannelRequest, AgentChannelResponse]

func _StreamService_StreamAgentStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamAgentStatus(m, &grpc.GenericServerStream[StreamAgentStatusRequest, StreamAgentStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamAgentStatusServer = grpc.ServerStreamingServer[StreamAgentStatusResponse]

func _StreamService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, StreamEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamService_StreamEventsServer = grpc.ServerStreamingServer[StreamEventsResponse]

// StreamService_ServiceDesc is the grpc.ServiceDesc for StreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.v1.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StreamService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTaskLog",
			Handler:       _StreamService_StreamTaskLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadTaskLog",
			Handler:       _StreamService_UploadTaskLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTaskStatus",
			Handler:       _StreamService_StreamTaskStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPipelineStatus",
			Handler:       _StreamService_StreamPipelineStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AgentChannel",
			Handler:       _StreamService_AgentChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAgentStatus",
			Handler:       _StreamService_StreamAgentStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _StreamService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream/v1/stream.proto",
}
