// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/stream/v1/proto/stream.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stream_Ping_FullMethodName                 = "/api.stream.v1.Stream/Ping"
	Stream_StreamTaskLog_FullMethodName        = "/api.stream.v1.Stream/StreamTaskLog"
	Stream_UploadTaskLog_FullMethodName        = "/api.stream.v1.Stream/UploadTaskLog"
	Stream_StreamTaskStatus_FullMethodName     = "/api.stream.v1.Stream/StreamTaskStatus"
	Stream_StreamPipelineStatus_FullMethodName = "/api.stream.v1.Stream/StreamPipelineStatus"
	Stream_AgentChannel_FullMethodName         = "/api.stream.v1.Stream/AgentChannel"
	Stream_StreamAgentStatus_FullMethodName    = "/api.stream.v1.Stream/StreamAgentStatus"
	Stream_StreamEvents_FullMethodName         = "/api.stream.v1.Stream/StreamEvents"
)

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Stream服务 - 实时数据流传输接口
type StreamClient interface {
	// ping
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// 实时获取任务日志流 - Server端流式推送日志给客户端
	StreamTaskLog(ctx context.Context, in *StreamTaskLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskLogResponse], error)
	// 上报任务日志流 - Agent端流式上报日志给Server
	UploadTaskLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadTaskLogRequest, UploadTaskLogResponse], error)
	// 实时获取任务状态流 - Server端流式推送任务状态变化
	StreamTaskStatus(ctx context.Context, in *StreamTaskStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskStatusResponse], error)
	// 实时获取流水线状态流 - Server端流式推送流水线状态变化
	StreamPipelineStatus(ctx context.Context, in *StreamPipelineStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPipelineStatusResponse], error)
	// Agent与Server双向通信流 - 用于实时任务调度和控制
	AgentChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentChannelRequest, AgentChannelResponse], error)
	// 实时监控Agent状态流 - Server端流式推送Agent状态变化
	StreamAgentStatus(ctx context.Context, in *StreamAgentStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAgentStatusResponse], error)
	// 实时事件流 - Server端推送系统事件
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Stream_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) StreamTaskLog(ctx context.Context, in *StreamTaskLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[0], Stream_StreamTaskLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTaskLogRequest, StreamTaskLogResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamTaskLogClient = grpc.ServerStreamingClient[StreamTaskLogResponse]

func (c *streamClient) UploadTaskLog(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadTaskLogRequest, UploadTaskLogResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[1], Stream_UploadTaskLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadTaskLogRequest, UploadTaskLogResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_UploadTaskLogClient = grpc.ClientStreamingClient[UploadTaskLogRequest, UploadTaskLogResponse]

func (c *streamClient) StreamTaskStatus(ctx context.Context, in *StreamTaskStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamTaskStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[2], Stream_StreamTaskStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTaskStatusRequest, StreamTaskStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamTaskStatusClient = grpc.ServerStreamingClient[StreamTaskStatusResponse]

func (c *streamClient) StreamPipelineStatus(ctx context.Context, in *StreamPipelineStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamPipelineStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[3], Stream_StreamPipelineStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPipelineStatusRequest, StreamPipelineStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamPipelineStatusClient = grpc.ServerStreamingClient[StreamPipelineStatusResponse]

func (c *streamClient) AgentChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentChannelRequest, AgentChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[4], Stream_AgentChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentChannelRequest, AgentChannelResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_AgentChannelClient = grpc.BidiStreamingClient[AgentChannelRequest, AgentChannelResponse]

func (c *streamClient) StreamAgentStatus(ctx context.Context, in *StreamAgentStatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAgentStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[5], Stream_StreamAgentStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAgentStatusRequest, StreamAgentStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamAgentStatusClient = grpc.ServerStreamingClient[StreamAgentStatusResponse]

func (c *streamClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[6], Stream_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, StreamEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamEventsClient = grpc.ServerStreamingClient[StreamEventsResponse]

// StreamServer is the server API for Stream service.
// All implementations must embed UnimplementedStreamServer
// for forward compatibility.
//
// Stream服务 - 实时数据流传输接口
type StreamServer interface {
	// ping
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// 实时获取任务日志流 - Server端流式推送日志给客户端
	StreamTaskLog(*StreamTaskLogRequest, grpc.ServerStreamingServer[StreamTaskLogResponse]) error
	// 上报任务日志流 - Agent端流式上报日志给Server
	UploadTaskLog(grpc.ClientStreamingServer[UploadTaskLogRequest, UploadTaskLogResponse]) error
	// 实时获取任务状态流 - Server端流式推送任务状态变化
	StreamTaskStatus(*StreamTaskStatusRequest, grpc.ServerStreamingServer[StreamTaskStatusResponse]) error
	// 实时获取流水线状态流 - Server端流式推送流水线状态变化
	StreamPipelineStatus(*StreamPipelineStatusRequest, grpc.ServerStreamingServer[StreamPipelineStatusResponse]) error
	// Agent与Server双向通信流 - 用于实时任务调度和控制
	AgentChannel(grpc.BidiStreamingServer[AgentChannelRequest, AgentChannelResponse]) error
	// 实时监控Agent状态流 - Server端流式推送Agent状态变化
	StreamAgentStatus(*StreamAgentStatusRequest, grpc.ServerStreamingServer[StreamAgentStatusResponse]) error
	// 实时事件流 - Server端推送系统事件
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error
	mustEmbedUnimplementedStreamServer()
}

// UnimplementedStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServer struct{}

func (UnimplementedStreamServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStreamServer) StreamTaskLog(*StreamTaskLogRequest, grpc.ServerStreamingServer[StreamTaskLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskLog not implemented")
}
func (UnimplementedStreamServer) UploadTaskLog(grpc.ClientStreamingServer[UploadTaskLogRequest, UploadTaskLogResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadTaskLog not implemented")
}
func (UnimplementedStreamServer) StreamTaskStatus(*StreamTaskStatusRequest, grpc.ServerStreamingServer[StreamTaskStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskStatus not implemented")
}
func (UnimplementedStreamServer) StreamPipelineStatus(*StreamPipelineStatusRequest, grpc.ServerStreamingServer[StreamPipelineStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPipelineStatus not implemented")
}
func (UnimplementedStreamServer) AgentChannel(grpc.BidiStreamingServer[AgentChannelRequest, AgentChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AgentChannel not implemented")
}
func (UnimplementedStreamServer) StreamAgentStatus(*StreamAgentStatusRequest, grpc.ServerStreamingServer[StreamAgentStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAgentStatus not implemented")
}
func (UnimplementedStreamServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedStreamServer) mustEmbedUnimplementedStreamServer() {}
func (UnimplementedStreamServer) testEmbeddedByValue()                {}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	// If the following call pancis, it indicates UnimplementedStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stream_ServiceDesc, srv)
}

func _Stream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stream_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_StreamTaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTaskLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).StreamTaskLog(m, &grpc.GenericServerStream[StreamTaskLogRequest, StreamTaskLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamTaskLogServer = grpc.ServerStreamingServer[StreamTaskLogResponse]

func _Stream_UploadTaskLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).UploadTaskLog(&grpc.GenericServerStream[UploadTaskLogRequest, UploadTaskLogResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_UploadTaskLogServer = grpc.ClientStreamingServer[UploadTaskLogRequest, UploadTaskLogResponse]

func _Stream_StreamTaskStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTaskStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).StreamTaskStatus(m, &grpc.GenericServerStream[StreamTaskStatusRequest, StreamTaskStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamTaskStatusServer = grpc.ServerStreamingServer[StreamTaskStatusResponse]

func _Stream_StreamPipelineStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPipelineStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).StreamPipelineStatus(m, &grpc.GenericServerStream[StreamPipelineStatusRequest, StreamPipelineStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamPipelineStatusServer = grpc.ServerStreamingServer[StreamPipelineStatusResponse]

func _Stream_AgentChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).AgentChannel(&grpc.GenericServerStream[AgentChannelRequest, AgentChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_AgentChannelServer = grpc.BidiStreamingServer[AgentChannelRequest, AgentChannelResponse]

func _Stream_StreamAgentStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAgentStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).StreamAgentStatus(m, &grpc.GenericServerStream[StreamAgentStatusRequest, StreamAgentStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamAgentStatusServer = grpc.ServerStreamingServer[StreamAgentStatusResponse]

func _Stream_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, StreamEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Stream_StreamEventsServer = grpc.ServerStreamingServer[StreamEventsResponse]

// Stream_ServiceDesc is the grpc.ServiceDesc for Stream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stream.v1.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Stream_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTaskLog",
			Handler:       _Stream_StreamTaskLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadTaskLog",
			Handler:       _Stream_UploadTaskLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTaskStatus",
			Handler:       _Stream_StreamTaskStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPipelineStatus",
			Handler:       _Stream_StreamPipelineStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AgentChannel",
			Handler:       _Stream_AgentChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAgentStatus",
			Handler:       _Stream_StreamAgentStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _Stream_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/stream/v1/proto/stream.proto",
}
