syntax = "proto3";

package pipeline.v1;

option go_package = "github.com/go-arcade/arcade/api/pipeline/v1;pipelinev1";

// PipelineService - Pipeline management interface
service PipelineService {
  // Ping service health check
  rpc Ping(PingRequest) returns (PingResponse) {}
    
  // Create pipeline
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {}

  // Get pipeline details
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {}

  // List pipelines
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {}

  // Trigger pipeline execution
  rpc TriggerPipeline(TriggerPipelineRequest) returns (TriggerPipelineResponse) {}

  // Stop pipeline
  rpc StopPipeline(StopPipelineRequest) returns (StopPipelineResponse) {}
}

// Ping request
message PingRequest {
  string message = 1;
}

// Ping response
message PingResponse {
  string message = 1;
  int64 timestamp = 2;
}

// Pipeline status enum
enum PipelineStatus {
  PIPELINE_STATUS_UNSPECIFIED = 0;
  PIPELINE_STATUS_PENDING = 1;   // Pending
  PIPELINE_STATUS_RUNNING = 2;   // Running
  PIPELINE_STATUS_SUCCESS = 3;   // Success
  PIPELINE_STATUS_FAILED = 4;    // Failed
  PIPELINE_STATUS_CANCELLED = 5; // Cancelled
  PIPELINE_STATUS_PARTIAL = 6;   // Partial success
}

// Trigger type enum
enum TriggerType {
  TRIGGER_TYPE_UNSPECIFIED = 0;
  TRIGGER_TYPE_MANUAL = 1;       // Manual trigger
  TRIGGER_TYPE_WEBHOOK = 2;      // Webhook trigger
  TRIGGER_TYPE_SCHEDULE = 3;     // Schedule trigger
  TRIGGER_TYPE_API = 4;          // API trigger
}

// Stage definition
message Stage {
  string name = 1;                      // Stage name
  repeated Job jobs = 2;                // List of jobs in the stage
  bool parallel = 3;                    // Whether to execute jobs in parallel
}

// Job definition
message Job {
  string name = 1;                      // Job name
  string image = 2;                     // Docker image
  repeated string commands = 3;         // Commands to execute
  map<string, string> env = 4;          // Environment variables
  repeated string depends_on = 5;       // Dependent jobs
  int32 timeout = 6;                    // Timeout (seconds)
  int32 retry = 7;                      // Retry count
}

// Create pipeline request
message CreatePipelineRequest {
  string name = 1;                      // Pipeline name
  string description = 2;               // Description
  string repo_url = 3;                  // Repository URL
  string branch = 4;                    // Branch
  repeated Stage stages = 5;            // Stage configuration
  map<string, string> env = 6;          // Global environment variables
  TriggerType trigger_type = 7;         // Trigger type
  string cron = 8;                      // Cron expression (required for schedule trigger)
  string created_by = 9;                // Creator
}

// Create pipeline response
message CreatePipelineResponse {
  bool success = 1;
  string message = 2;
  string pipeline_id = 3;               // Created pipeline ID
}

// 获取流水线请求
message GetPipelineRequest {
  string pipeline_id = 1;
}

// 获取流水线响应
message GetPipelineResponse {
  bool success = 1;
  string message = 2;
  PipelineDetail pipeline = 3;
}

// Pipeline details
message PipelineDetail {
  string pipeline_id = 1;               // Pipeline ID
  string name = 2;                      // Pipeline name
  string description = 3;               // Description
  string repo_url = 4;                  // Repository URL
  string branch = 5;                    // Branch
  PipelineStatus status = 6;            // Pipeline status
  repeated Stage stages = 7;            // Stage configuration
  map<string, string> env = 8;          // Global environment variables
  TriggerType trigger_type = 9;         // Trigger type
  string cron = 10;                     // Cron expression
  int64 created_at = 11;                // Creation time
  int64 updated_at = 12;                // Update time
  string created_by = 13;               // Creator
  int32 total_runs = 14;                // Total runs
  int32 success_runs = 15;              // Successful runs
  int32 failed_runs = 16;               // Failed runs
}

// List pipelines request
message ListPipelinesRequest {
  PipelineStatus status = 1;            // Status filter (optional)
  int32 page = 2;                       // Page number (starting from 1)
  int32 page_size = 3;                  // Items per page (default 20)
  string sort_by = 4;                   // Sort field
  bool sort_desc = 5;                   // Descending order
}

// List pipelines response
message ListPipelinesResponse {
  bool success = 1;
  string message = 2;
  repeated PipelineDetail pipelines = 3;
  int32 total = 4;                      // Total count
  int32 page = 5;                       // Current page
  int32 page_size = 6;                  // Items per page
}

// Trigger pipeline request
message TriggerPipelineRequest {
  string pipeline_id = 1;
  string branch = 2;                    // Branch (optional, override default branch)
  string commit_sha = 3;                // Commit SHA (optional)
  map<string, string> env = 4;          // Additional environment variables (optional)
  string triggered_by = 5;              // Triggerer
}

// Trigger pipeline response
message TriggerPipelineResponse {
  bool success = 1;
  string message = 2;
  string run_id = 3;                    // Pipeline run ID
  repeated string job_ids = 4;          // List of created job IDs
}

// Stop pipeline request
message StopPipelineRequest {
  string pipeline_id = 1;
  string run_id = 2;                    // Pipeline run ID
  string reason = 3;                    // Stop reason
}

// Stop pipeline response
message StopPipelineResponse {
  bool success = 1;
  string message = 2;
}
