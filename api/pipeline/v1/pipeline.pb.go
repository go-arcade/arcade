// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: api/pipeline/v1/proto/pipeline.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 流水线状态枚举
type PipelineStatus int32

const (
	PipelineStatus_PIPELINE_STATUS_UNKNOWN   PipelineStatus = 0
	PipelineStatus_PIPELINE_STATUS_PENDING   PipelineStatus = 1 // 等待执行
	PipelineStatus_PIPELINE_STATUS_RUNNING   PipelineStatus = 2 // 执行中
	PipelineStatus_PIPELINE_STATUS_SUCCESS   PipelineStatus = 3 // 执行成功
	PipelineStatus_PIPELINE_STATUS_FAILED    PipelineStatus = 4 // 执行失败
	PipelineStatus_PIPELINE_STATUS_CANCELLED PipelineStatus = 5 // 已取消
	PipelineStatus_PIPELINE_STATUS_PARTIAL   PipelineStatus = 6 // 部分成功
)

// Enum value maps for PipelineStatus.
var (
	PipelineStatus_name = map[int32]string{
		0: "PIPELINE_STATUS_UNKNOWN",
		1: "PIPELINE_STATUS_PENDING",
		2: "PIPELINE_STATUS_RUNNING",
		3: "PIPELINE_STATUS_SUCCESS",
		4: "PIPELINE_STATUS_FAILED",
		5: "PIPELINE_STATUS_CANCELLED",
		6: "PIPELINE_STATUS_PARTIAL",
	}
	PipelineStatus_value = map[string]int32{
		"PIPELINE_STATUS_UNKNOWN":   0,
		"PIPELINE_STATUS_PENDING":   1,
		"PIPELINE_STATUS_RUNNING":   2,
		"PIPELINE_STATUS_SUCCESS":   3,
		"PIPELINE_STATUS_FAILED":    4,
		"PIPELINE_STATUS_CANCELLED": 5,
		"PIPELINE_STATUS_PARTIAL":   6,
	}
)

func (x PipelineStatus) Enum() *PipelineStatus {
	p := new(PipelineStatus)
	*p = x
	return p
}

func (x PipelineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pipeline_v1_proto_pipeline_proto_enumTypes[0].Descriptor()
}

func (PipelineStatus) Type() protoreflect.EnumType {
	return &file_api_pipeline_v1_proto_pipeline_proto_enumTypes[0]
}

func (x PipelineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineStatus.Descriptor instead.
func (PipelineStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{0}
}

// 触发类型枚举
type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNKNOWN  TriggerType = 0
	TriggerType_TRIGGER_TYPE_MANUAL   TriggerType = 1 // 手动触发
	TriggerType_TRIGGER_TYPE_WEBHOOK  TriggerType = 2 // Webhook触发
	TriggerType_TRIGGER_TYPE_SCHEDULE TriggerType = 3 // 定时触发
	TriggerType_TRIGGER_TYPE_API      TriggerType = 4 // API触发
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNKNOWN",
		1: "TRIGGER_TYPE_MANUAL",
		2: "TRIGGER_TYPE_WEBHOOK",
		3: "TRIGGER_TYPE_SCHEDULE",
		4: "TRIGGER_TYPE_API",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNKNOWN":  0,
		"TRIGGER_TYPE_MANUAL":   1,
		"TRIGGER_TYPE_WEBHOOK":  2,
		"TRIGGER_TYPE_SCHEDULE": 3,
		"TRIGGER_TYPE_API":      4,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pipeline_v1_proto_pipeline_proto_enumTypes[1].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_api_pipeline_v1_proto_pipeline_proto_enumTypes[1]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{1}
}

// ping 请求
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ping 响应
type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 阶段定义
type Stage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // 阶段名称
	Jobs          []*Job                 `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`          // 阶段中的任务列表
	Parallel      bool                   `protobuf:"varint,3,opt,name=parallel,proto3" json:"parallel,omitempty"` // 是否并行执行任务
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stage) Reset() {
	*x = Stage{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *Stage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stage) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *Stage) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

// 任务定义
type Job struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                         // 任务名称
	Image         string                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                                                                       // Docker镜像
	Commands      []string               `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`                                                                 // 执行命令
	Env           map[string]string      `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 环境变量
	DependsOn     []string               `protobuf:"bytes,5,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`                                              // 依赖的任务
	Timeout       int32                  `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`                                                                  // 超时时间（秒）
	Retry         int32                  `protobuf:"varint,7,opt,name=retry,proto3" json:"retry,omitempty"`                                                                      // 重试次数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Job) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Job) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Job) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *Job) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Job) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

// 创建流水线请求
type CreatePipelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                         // 流水线名称
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                           // 描述
	RepoUrl       string                 `protobuf:"bytes,3,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`                                                    // 代码仓库URL
	Branch        string                 `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`                                                                     // 分支
	Stages        []*Stage               `protobuf:"bytes,5,rep,name=stages,proto3" json:"stages,omitempty"`                                                                     // 阶段配置
	Env           map[string]string      `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 全局环境变量
	TriggerType   TriggerType            `protobuf:"varint,7,opt,name=trigger_type,json=triggerType,proto3,enum=api.pipeline.v1.TriggerType" json:"trigger_type,omitempty"`      // 触发类型
	Cron          string                 `protobuf:"bytes,8,opt,name=cron,proto3" json:"cron,omitempty"`                                                                         // Cron表达式（定时触发时需要）
	CreatedBy     string                 `protobuf:"bytes,9,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                                              // 创建者
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePipelineRequest) Reset() {
	*x = CreatePipelineRequest{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineRequest) ProtoMessage() {}

func (x *CreatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePipelineRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePipelineRequest) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *CreatePipelineRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreatePipelineRequest) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *CreatePipelineRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CreatePipelineRequest) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNKNOWN
}

func (x *CreatePipelineRequest) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *CreatePipelineRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

// 创建流水线响应
type CreatePipelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	PipelineId    string                 `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"` // 创建的流水线ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePipelineResponse) Reset() {
	*x = CreatePipelineResponse{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineResponse) ProtoMessage() {}

func (x *CreatePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineResponse.ProtoReflect.Descriptor instead.
func (*CreatePipelineResponse) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePipelineResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreatePipelineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreatePipelineResponse) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

// 获取流水线请求
type GetPipelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPipelineRequest) Reset() {
	*x = GetPipelineRequest{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineRequest) ProtoMessage() {}

func (x *GetPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetPipelineRequest) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *GetPipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

// 获取流水线响应
type GetPipelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pipeline      *PipelineDetail        `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPipelineResponse) Reset() {
	*x = GetPipelineResponse{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineResponse) ProtoMessage() {}

func (x *GetPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetPipelineResponse) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *GetPipelineResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetPipelineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPipelineResponse) GetPipeline() *PipelineDetail {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// 流水线详情
type PipelineDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`                                           // 流水线ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                         // 流水线名称
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                           // 描述
	RepoUrl       string                 `protobuf:"bytes,4,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`                                                    // 代码仓库URL
	Branch        string                 `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`                                                                     // 分支
	Status        PipelineStatus         `protobuf:"varint,6,opt,name=status,proto3,enum=api.pipeline.v1.PipelineStatus" json:"status,omitempty"`                                // 流水线状态
	Stages        []*Stage               `protobuf:"bytes,7,rep,name=stages,proto3" json:"stages,omitempty"`                                                                     // 阶段配置
	Env           map[string]string      `protobuf:"bytes,8,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 全局环境变量
	TriggerType   TriggerType            `protobuf:"varint,9,opt,name=trigger_type,json=triggerType,proto3,enum=api.pipeline.v1.TriggerType" json:"trigger_type,omitempty"`      // 触发类型
	Cron          string                 `protobuf:"bytes,10,opt,name=cron,proto3" json:"cron,omitempty"`                                                                        // Cron表达式
	CreatedAt     int64                  `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                            // 创建时间
	UpdatedAt     int64                  `protobuf:"varint,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                            // 更新时间
	CreatedBy     string                 `protobuf:"bytes,13,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`                                             // 创建者
	TotalRuns     int32                  `protobuf:"varint,14,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`                                            // 总执行次数
	SuccessRuns   int32                  `protobuf:"varint,15,opt,name=success_runs,json=successRuns,proto3" json:"success_runs,omitempty"`                                      // 成功次数
	FailedRuns    int32                  `protobuf:"varint,16,opt,name=failed_runs,json=failedRuns,proto3" json:"failed_runs,omitempty"`                                         // 失败次数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineDetail) Reset() {
	*x = PipelineDetail{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineDetail) ProtoMessage() {}

func (x *PipelineDetail) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineDetail.ProtoReflect.Descriptor instead.
func (*PipelineDetail) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *PipelineDetail) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineDetail) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *PipelineDetail) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PipelineDetail) GetStatus() PipelineStatus {
	if x != nil {
		return x.Status
	}
	return PipelineStatus_PIPELINE_STATUS_UNKNOWN
}

func (x *PipelineDetail) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *PipelineDetail) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *PipelineDetail) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNKNOWN
}

func (x *PipelineDetail) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

func (x *PipelineDetail) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PipelineDetail) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PipelineDetail) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PipelineDetail) GetTotalRuns() int32 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *PipelineDetail) GetSuccessRuns() int32 {
	if x != nil {
		return x.SuccessRuns
	}
	return 0
}

func (x *PipelineDetail) GetFailedRuns() int32 {
	if x != nil {
		return x.FailedRuns
	}
	return 0
}

// 列出流水线请求
type ListPipelinesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        PipelineStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=api.pipeline.v1.PipelineStatus" json:"status,omitempty"` // 状态过滤（可选）
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                         // 页码（从1开始）
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                 // 每页数量（默认20）
	SortBy        string                 `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                        // 排序字段
	SortDesc      bool                   `protobuf:"varint,5,opt,name=sort_desc,json=sortDesc,proto3" json:"sort_desc,omitempty"`                 // 是否降序
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPipelinesRequest) Reset() {
	*x = ListPipelinesRequest{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesRequest) ProtoMessage() {}

func (x *ListPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *ListPipelinesRequest) GetStatus() PipelineStatus {
	if x != nil {
		return x.Status
	}
	return PipelineStatus_PIPELINE_STATUS_UNKNOWN
}

func (x *ListPipelinesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPipelinesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPipelinesRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListPipelinesRequest) GetSortDesc() bool {
	if x != nil {
		return x.SortDesc
	}
	return false
}

// 列出流水线响应
type ListPipelinesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pipelines     []*PipelineDetail      `protobuf:"bytes,3,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 每页数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPipelinesResponse) Reset() {
	*x = ListPipelinesResponse{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesResponse) ProtoMessage() {}

func (x *ListPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *ListPipelinesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListPipelinesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListPipelinesResponse) GetPipelines() []*PipelineDetail {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPipelinesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListPipelinesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 触发流水线请求
type TriggerPipelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Branch        string                 `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`                                                                     // 分支（可选，覆盖默认分支）
	CommitSha     string                 `protobuf:"bytes,3,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`                                              // Commit SHA（可选）
	Env           map[string]string      `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外的环境变量（可选）
	TriggeredBy   string                 `protobuf:"bytes,5,opt,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`                                        // 触发者
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerPipelineRequest) Reset() {
	*x = TriggerPipelineRequest{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPipelineRequest) ProtoMessage() {}

func (x *TriggerPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerPipelineRequest) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *TriggerPipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *TriggerPipelineRequest) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *TriggerPipelineRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *TriggerPipelineRequest) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TriggerPipelineRequest) GetTriggeredBy() string {
	if x != nil {
		return x.TriggeredBy
	}
	return ""
}

// 触发流水线响应
type TriggerPipelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RunId         string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`    // 流水线执行ID
	JobIds        []string               `protobuf:"bytes,4,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"` // 创建的任务ID列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerPipelineResponse) Reset() {
	*x = TriggerPipelineResponse{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPipelineResponse) ProtoMessage() {}

func (x *TriggerPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerPipelineResponse) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *TriggerPipelineResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TriggerPipelineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TriggerPipelineResponse) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TriggerPipelineResponse) GetJobIds() []string {
	if x != nil {
		return x.JobIds
	}
	return nil
}

// 停止流水线请求
type StopPipelineRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PipelineId    string                 `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	RunId         string                 `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"` // 流水线执行ID
	Reason        string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`            // 停止原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopPipelineRequest) Reset() {
	*x = StopPipelineRequest{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPipelineRequest) ProtoMessage() {}

func (x *StopPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPipelineRequest.ProtoReflect.Descriptor instead.
func (*StopPipelineRequest) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *StopPipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *StopPipelineRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *StopPipelineRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// 停止流水线响应
type StopPipelineResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopPipelineResponse) Reset() {
	*x = StopPipelineResponse{}
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPipelineResponse) ProtoMessage() {}

func (x *StopPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_pipeline_v1_proto_pipeline_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPipelineResponse.ProtoReflect.Descriptor instead.
func (*StopPipelineResponse) Descriptor() ([]byte, []int) {
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *StopPipelineResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StopPipelineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_api_pipeline_v1_proto_pipeline_proto protoreflect.FileDescriptor

const file_api_pipeline_v1_proto_pipeline_proto_rawDesc = "" +
	"\n" +
	"$api/pipeline/v1/proto/pipeline.proto\x12\x0fapi.pipeline.v1\"'\n" +
	"\vPingRequest\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"F\n" +
	"\fPingResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"a\n" +
	"\x05Stage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12(\n" +
	"\x04jobs\x18\x02 \x03(\v2\x14.api.pipeline.v1.JobR\x04jobs\x12\x1a\n" +
	"\bparallel\x18\x03 \x01(\bR\bparallel\"\x83\x02\n" +
	"\x03Job\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05image\x18\x02 \x01(\tR\x05image\x12\x1a\n" +
	"\bcommands\x18\x03 \x03(\tR\bcommands\x12/\n" +
	"\x03env\x18\x04 \x03(\v2\x1d.api.pipeline.v1.Job.EnvEntryR\x03env\x12\x1d\n" +
	"\n" +
	"depends_on\x18\x05 \x03(\tR\tdependsOn\x12\x18\n" +
	"\atimeout\x18\x06 \x01(\x05R\atimeout\x12\x14\n" +
	"\x05retry\x18\a \x01(\x05R\x05retry\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9f\x03\n" +
	"\x15CreatePipelineRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x19\n" +
	"\brepo_url\x18\x03 \x01(\tR\arepoUrl\x12\x16\n" +
	"\x06branch\x18\x04 \x01(\tR\x06branch\x12.\n" +
	"\x06stages\x18\x05 \x03(\v2\x16.api.pipeline.v1.StageR\x06stages\x12A\n" +
	"\x03env\x18\x06 \x03(\v2/.api.pipeline.v1.CreatePipelineRequest.EnvEntryR\x03env\x12?\n" +
	"\ftrigger_type\x18\a \x01(\x0e2\x1c.api.pipeline.v1.TriggerTypeR\vtriggerType\x12\x12\n" +
	"\x04cron\x18\b \x01(\tR\x04cron\x12\x1d\n" +
	"\n" +
	"created_by\x18\t \x01(\tR\tcreatedBy\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"m\n" +
	"\x16CreatePipelineResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vpipeline_id\x18\x03 \x01(\tR\n" +
	"pipelineId\"5\n" +
	"\x12GetPipelineRequest\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\"\x86\x01\n" +
	"\x13GetPipelineResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12;\n" +
	"\bpipeline\x18\x03 \x01(\v2\x1f.api.pipeline.v1.PipelineDetailR\bpipeline\"\x8c\x05\n" +
	"\x0ePipelineDetail\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x19\n" +
	"\brepo_url\x18\x04 \x01(\tR\arepoUrl\x12\x16\n" +
	"\x06branch\x18\x05 \x01(\tR\x06branch\x127\n" +
	"\x06status\x18\x06 \x01(\x0e2\x1f.api.pipeline.v1.PipelineStatusR\x06status\x12.\n" +
	"\x06stages\x18\a \x03(\v2\x16.api.pipeline.v1.StageR\x06stages\x12:\n" +
	"\x03env\x18\b \x03(\v2(.api.pipeline.v1.PipelineDetail.EnvEntryR\x03env\x12?\n" +
	"\ftrigger_type\x18\t \x01(\x0e2\x1c.api.pipeline.v1.TriggerTypeR\vtriggerType\x12\x12\n" +
	"\x04cron\x18\n" +
	" \x01(\tR\x04cron\x12\x1d\n" +
	"\n" +
	"created_at\x18\v \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\f \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"created_by\x18\r \x01(\tR\tcreatedBy\x12\x1d\n" +
	"\n" +
	"total_runs\x18\x0e \x01(\x05R\ttotalRuns\x12!\n" +
	"\fsuccess_runs\x18\x0f \x01(\x05R\vsuccessRuns\x12\x1f\n" +
	"\vfailed_runs\x18\x10 \x01(\x05R\n" +
	"failedRuns\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb6\x01\n" +
	"\x14ListPipelinesRequest\x127\n" +
	"\x06status\x18\x01 \x01(\x0e2\x1f.api.pipeline.v1.PipelineStatusR\x06status\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x17\n" +
	"\asort_by\x18\x04 \x01(\tR\x06sortBy\x12\x1b\n" +
	"\tsort_desc\x18\x05 \x01(\bR\bsortDesc\"\xd1\x01\n" +
	"\x15ListPipelinesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12=\n" +
	"\tpipelines\x18\x03 \x03(\v2\x1f.api.pipeline.v1.PipelineDetailR\tpipelines\x12\x14\n" +
	"\x05total\x18\x04 \x01(\x05R\x05total\x12\x12\n" +
	"\x04page\x18\x05 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\"\x8f\x02\n" +
	"\x16TriggerPipelineRequest\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x1d\n" +
	"\n" +
	"commit_sha\x18\x03 \x01(\tR\tcommitSha\x12B\n" +
	"\x03env\x18\x04 \x03(\v20.api.pipeline.v1.TriggerPipelineRequest.EnvEntryR\x03env\x12!\n" +
	"\ftriggered_by\x18\x05 \x01(\tR\vtriggeredBy\x1a6\n" +
	"\bEnvEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"}\n" +
	"\x17TriggerPipelineResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x15\n" +
	"\x06run_id\x18\x03 \x01(\tR\x05runId\x12\x17\n" +
	"\ajob_ids\x18\x04 \x03(\tR\x06jobIds\"e\n" +
	"\x13StopPipelineRequest\x12\x1f\n" +
	"\vpipeline_id\x18\x01 \x01(\tR\n" +
	"pipelineId\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"J\n" +
	"\x14StopPipelineResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage*\xdc\x01\n" +
	"\x0ePipelineStatus\x12\x1b\n" +
	"\x17PIPELINE_STATUS_UNKNOWN\x10\x00\x12\x1b\n" +
	"\x17PIPELINE_STATUS_PENDING\x10\x01\x12\x1b\n" +
	"\x17PIPELINE_STATUS_RUNNING\x10\x02\x12\x1b\n" +
	"\x17PIPELINE_STATUS_SUCCESS\x10\x03\x12\x1a\n" +
	"\x16PIPELINE_STATUS_FAILED\x10\x04\x12\x1d\n" +
	"\x19PIPELINE_STATUS_CANCELLED\x10\x05\x12\x1b\n" +
	"\x17PIPELINE_STATUS_PARTIAL\x10\x06*\x8b\x01\n" +
	"\vTriggerType\x12\x18\n" +
	"\x14TRIGGER_TYPE_UNKNOWN\x10\x00\x12\x17\n" +
	"\x13TRIGGER_TYPE_MANUAL\x10\x01\x12\x18\n" +
	"\x14TRIGGER_TYPE_WEBHOOK\x10\x02\x12\x19\n" +
	"\x15TRIGGER_TYPE_SCHEDULE\x10\x03\x12\x14\n" +
	"\x10TRIGGER_TYPE_API\x10\x042\xbb\x04\n" +
	"\bPipeline\x12E\n" +
	"\x04Ping\x12\x1c.api.pipeline.v1.PingRequest\x1a\x1d.api.pipeline.v1.PingResponse\"\x00\x12c\n" +
	"\x0eCreatePipeline\x12&.api.pipeline.v1.CreatePipelineRequest\x1a'.api.pipeline.v1.CreatePipelineResponse\"\x00\x12Z\n" +
	"\vGetPipeline\x12#.api.pipeline.v1.GetPipelineRequest\x1a$.api.pipeline.v1.GetPipelineResponse\"\x00\x12`\n" +
	"\rListPipelines\x12%.api.pipeline.v1.ListPipelinesRequest\x1a&.api.pipeline.v1.ListPipelinesResponse\"\x00\x12f\n" +
	"\x0fTriggerPipeline\x12'.api.pipeline.v1.TriggerPipelineRequest\x1a(.api.pipeline.v1.TriggerPipelineResponse\"\x00\x12]\n" +
	"\fStopPipeline\x12$.api.pipeline.v1.StopPipelineRequest\x1a%.api.pipeline.v1.StopPipelineResponse\"\x00B1Z/github.com/observabil/arcade/api/pipeline/v1;v1b\x06proto3"

var (
	file_api_pipeline_v1_proto_pipeline_proto_rawDescOnce sync.Once
	file_api_pipeline_v1_proto_pipeline_proto_rawDescData []byte
)

func file_api_pipeline_v1_proto_pipeline_proto_rawDescGZIP() []byte {
	file_api_pipeline_v1_proto_pipeline_proto_rawDescOnce.Do(func() {
		file_api_pipeline_v1_proto_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_pipeline_v1_proto_pipeline_proto_rawDesc), len(file_api_pipeline_v1_proto_pipeline_proto_rawDesc)))
	})
	return file_api_pipeline_v1_proto_pipeline_proto_rawDescData
}

var file_api_pipeline_v1_proto_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_pipeline_v1_proto_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_api_pipeline_v1_proto_pipeline_proto_goTypes = []any{
	(PipelineStatus)(0),             // 0: api.pipeline.v1.PipelineStatus
	(TriggerType)(0),                // 1: api.pipeline.v1.TriggerType
	(*PingRequest)(nil),             // 2: api.pipeline.v1.PingRequest
	(*PingResponse)(nil),            // 3: api.pipeline.v1.PingResponse
	(*Stage)(nil),                   // 4: api.pipeline.v1.Stage
	(*Job)(nil),                     // 5: api.pipeline.v1.Job
	(*CreatePipelineRequest)(nil),   // 6: api.pipeline.v1.CreatePipelineRequest
	(*CreatePipelineResponse)(nil),  // 7: api.pipeline.v1.CreatePipelineResponse
	(*GetPipelineRequest)(nil),      // 8: api.pipeline.v1.GetPipelineRequest
	(*GetPipelineResponse)(nil),     // 9: api.pipeline.v1.GetPipelineResponse
	(*PipelineDetail)(nil),          // 10: api.pipeline.v1.PipelineDetail
	(*ListPipelinesRequest)(nil),    // 11: api.pipeline.v1.ListPipelinesRequest
	(*ListPipelinesResponse)(nil),   // 12: api.pipeline.v1.ListPipelinesResponse
	(*TriggerPipelineRequest)(nil),  // 13: api.pipeline.v1.TriggerPipelineRequest
	(*TriggerPipelineResponse)(nil), // 14: api.pipeline.v1.TriggerPipelineResponse
	(*StopPipelineRequest)(nil),     // 15: api.pipeline.v1.StopPipelineRequest
	(*StopPipelineResponse)(nil),    // 16: api.pipeline.v1.StopPipelineResponse
	nil,                             // 17: api.pipeline.v1.Job.EnvEntry
	nil,                             // 18: api.pipeline.v1.CreatePipelineRequest.EnvEntry
	nil,                             // 19: api.pipeline.v1.PipelineDetail.EnvEntry
	nil,                             // 20: api.pipeline.v1.TriggerPipelineRequest.EnvEntry
}
var file_api_pipeline_v1_proto_pipeline_proto_depIdxs = []int32{
	5,  // 0: api.pipeline.v1.Stage.jobs:type_name -> api.pipeline.v1.Job
	17, // 1: api.pipeline.v1.Job.env:type_name -> api.pipeline.v1.Job.EnvEntry
	4,  // 2: api.pipeline.v1.CreatePipelineRequest.stages:type_name -> api.pipeline.v1.Stage
	18, // 3: api.pipeline.v1.CreatePipelineRequest.env:type_name -> api.pipeline.v1.CreatePipelineRequest.EnvEntry
	1,  // 4: api.pipeline.v1.CreatePipelineRequest.trigger_type:type_name -> api.pipeline.v1.TriggerType
	10, // 5: api.pipeline.v1.GetPipelineResponse.pipeline:type_name -> api.pipeline.v1.PipelineDetail
	0,  // 6: api.pipeline.v1.PipelineDetail.status:type_name -> api.pipeline.v1.PipelineStatus
	4,  // 7: api.pipeline.v1.PipelineDetail.stages:type_name -> api.pipeline.v1.Stage
	19, // 8: api.pipeline.v1.PipelineDetail.env:type_name -> api.pipeline.v1.PipelineDetail.EnvEntry
	1,  // 9: api.pipeline.v1.PipelineDetail.trigger_type:type_name -> api.pipeline.v1.TriggerType
	0,  // 10: api.pipeline.v1.ListPipelinesRequest.status:type_name -> api.pipeline.v1.PipelineStatus
	10, // 11: api.pipeline.v1.ListPipelinesResponse.pipelines:type_name -> api.pipeline.v1.PipelineDetail
	20, // 12: api.pipeline.v1.TriggerPipelineRequest.env:type_name -> api.pipeline.v1.TriggerPipelineRequest.EnvEntry
	2,  // 13: api.pipeline.v1.Pipeline.Ping:input_type -> api.pipeline.v1.PingRequest
	6,  // 14: api.pipeline.v1.Pipeline.CreatePipeline:input_type -> api.pipeline.v1.CreatePipelineRequest
	8,  // 15: api.pipeline.v1.Pipeline.GetPipeline:input_type -> api.pipeline.v1.GetPipelineRequest
	11, // 16: api.pipeline.v1.Pipeline.ListPipelines:input_type -> api.pipeline.v1.ListPipelinesRequest
	13, // 17: api.pipeline.v1.Pipeline.TriggerPipeline:input_type -> api.pipeline.v1.TriggerPipelineRequest
	15, // 18: api.pipeline.v1.Pipeline.StopPipeline:input_type -> api.pipeline.v1.StopPipelineRequest
	3,  // 19: api.pipeline.v1.Pipeline.Ping:output_type -> api.pipeline.v1.PingResponse
	7,  // 20: api.pipeline.v1.Pipeline.CreatePipeline:output_type -> api.pipeline.v1.CreatePipelineResponse
	9,  // 21: api.pipeline.v1.Pipeline.GetPipeline:output_type -> api.pipeline.v1.GetPipelineResponse
	12, // 22: api.pipeline.v1.Pipeline.ListPipelines:output_type -> api.pipeline.v1.ListPipelinesResponse
	14, // 23: api.pipeline.v1.Pipeline.TriggerPipeline:output_type -> api.pipeline.v1.TriggerPipelineResponse
	16, // 24: api.pipeline.v1.Pipeline.StopPipeline:output_type -> api.pipeline.v1.StopPipelineResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_pipeline_v1_proto_pipeline_proto_init() }
func file_api_pipeline_v1_proto_pipeline_proto_init() {
	if File_api_pipeline_v1_proto_pipeline_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_pipeline_v1_proto_pipeline_proto_rawDesc), len(file_api_pipeline_v1_proto_pipeline_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_pipeline_v1_proto_pipeline_proto_goTypes,
		DependencyIndexes: file_api_pipeline_v1_proto_pipeline_proto_depIdxs,
		EnumInfos:         file_api_pipeline_v1_proto_pipeline_proto_enumTypes,
		MessageInfos:      file_api_pipeline_v1_proto_pipeline_proto_msgTypes,
	}.Build()
	File_api_pipeline_v1_proto_pipeline_proto = out.File
	file_api_pipeline_v1_proto_pipeline_proto_goTypes = nil
	file_api_pipeline_v1_proto_pipeline_proto_depIdxs = nil
}
