// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: agent/v1/agent.proto

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentService_Heartbeat_FullMethodName            = "/agent.v1.AgentService/Heartbeat"
	AgentService_Register_FullMethodName             = "/agent.v1.AgentService/Register"
	AgentService_Unregister_FullMethodName           = "/agent.v1.AgentService/Unregister"
	AgentService_FetchTask_FullMethodName            = "/agent.v1.AgentService/FetchTask"
	AgentService_ReportTaskStatus_FullMethodName     = "/agent.v1.AgentService/ReportTaskStatus"
	AgentService_ReportTaskLog_FullMethodName        = "/agent.v1.AgentService/ReportTaskLog"
	AgentService_CancelTask_FullMethodName           = "/agent.v1.AgentService/CancelTask"
	AgentService_UpdateLabels_FullMethodName         = "/agent.v1.AgentService/UpdateLabels"
	AgentService_DownloadPlugin_FullMethodName       = "/agent.v1.AgentService/DownloadPlugin"
	AgentService_ListAvailablePlugins_FullMethodName = "/agent.v1.AgentService/ListAvailablePlugins"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Agent服务 - Agent端与Server端通信的主要接口
type AgentServiceClient interface {
	// 心跳保持 - Agent定期向Server发送心跳
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Agent注册 - Agent启动时向Server注册
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Agent注销 - Agent关闭时向Server注销
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error)
	// 获取任务 - Agent主动拉取待执行的任务
	FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error)
	// 上报任务状态 - Agent执行任务过程中上报状态变化
	ReportTaskStatus(ctx context.Context, in *ReportTaskStatusRequest, opts ...grpc.CallOption) (*ReportTaskStatusResponse, error)
	// 上报任务日志 - Agent批量上报任务执行日志
	ReportTaskLog(ctx context.Context, in *ReportTaskLogRequest, opts ...grpc.CallOption) (*ReportTaskLogResponse, error)
	// 取消任务 - Server通知Agent取消正在执行的任务
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
	// 更新Agent标签 - 动态更新Agent的labels
	UpdateLabels(ctx context.Context, in *UpdateLabelsRequest, opts ...grpc.CallOption) (*UpdateLabelsResponse, error)
	// 下载插件 - Agent从Server下载插件
	DownloadPlugin(ctx context.Context, in *DownloadPluginRequest, opts ...grpc.CallOption) (*DownloadPluginResponse, error)
	// 列出可用插件 - Agent查询可用的插件列表
	ListAvailablePlugins(ctx context.Context, in *ListAvailablePluginsRequest, opts ...grpc.CallOption) (*ListAvailablePluginsResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, AgentService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, AgentService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterResponse)
	err := c.cc.Invoke(ctx, AgentService_Unregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) FetchTask(ctx context.Context, in *FetchTaskRequest, opts ...grpc.CallOption) (*FetchTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTaskResponse)
	err := c.cc.Invoke(ctx, AgentService_FetchTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReportTaskStatus(ctx context.Context, in *ReportTaskStatusRequest, opts ...grpc.CallOption) (*ReportTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportTaskStatusResponse)
	err := c.cc.Invoke(ctx, AgentService_ReportTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ReportTaskLog(ctx context.Context, in *ReportTaskLogRequest, opts ...grpc.CallOption) (*ReportTaskLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportTaskLogResponse)
	err := c.cc.Invoke(ctx, AgentService_ReportTaskLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTaskResponse)
	err := c.cc.Invoke(ctx, AgentService_CancelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateLabels(ctx context.Context, in *UpdateLabelsRequest, opts ...grpc.CallOption) (*UpdateLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLabelsResponse)
	err := c.cc.Invoke(ctx, AgentService_UpdateLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) DownloadPlugin(ctx context.Context, in *DownloadPluginRequest, opts ...grpc.CallOption) (*DownloadPluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadPluginResponse)
	err := c.cc.Invoke(ctx, AgentService_DownloadPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ListAvailablePlugins(ctx context.Context, in *ListAvailablePluginsRequest, opts ...grpc.CallOption) (*ListAvailablePluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAvailablePluginsResponse)
	err := c.cc.Invoke(ctx, AgentService_ListAvailablePlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility.
//
// Agent服务 - Agent端与Server端通信的主要接口
type AgentServiceServer interface {
	// 心跳保持 - Agent定期向Server发送心跳
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Agent注册 - Agent启动时向Server注册
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Agent注销 - Agent关闭时向Server注销
	Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error)
	// 获取任务 - Agent主动拉取待执行的任务
	FetchTask(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error)
	// 上报任务状态 - Agent执行任务过程中上报状态变化
	ReportTaskStatus(context.Context, *ReportTaskStatusRequest) (*ReportTaskStatusResponse, error)
	// 上报任务日志 - Agent批量上报任务执行日志
	ReportTaskLog(context.Context, *ReportTaskLogRequest) (*ReportTaskLogResponse, error)
	// 取消任务 - Server通知Agent取消正在执行的任务
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	// 更新Agent标签 - 动态更新Agent的labels
	UpdateLabels(context.Context, *UpdateLabelsRequest) (*UpdateLabelsResponse, error)
	// 下载插件 - Agent从Server下载插件
	DownloadPlugin(context.Context, *DownloadPluginRequest) (*DownloadPluginResponse, error)
	// 列出可用插件 - Agent查询可用的插件列表
	ListAvailablePlugins(context.Context, *ListAvailablePluginsRequest) (*ListAvailablePluginsResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServiceServer struct{}

func (UnimplementedAgentServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedAgentServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAgentServiceServer) Unregister(context.Context, *UnregisterRequest) (*UnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedAgentServiceServer) FetchTask(context.Context, *FetchTaskRequest) (*FetchTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTask not implemented")
}
func (UnimplementedAgentServiceServer) ReportTaskStatus(context.Context, *ReportTaskStatusRequest) (*ReportTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskStatus not implemented")
}
func (UnimplementedAgentServiceServer) ReportTaskLog(context.Context, *ReportTaskLogRequest) (*ReportTaskLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTaskLog not implemented")
}
func (UnimplementedAgentServiceServer) CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedAgentServiceServer) UpdateLabels(context.Context, *UpdateLabelsRequest) (*UpdateLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabels not implemented")
}
func (UnimplementedAgentServiceServer) DownloadPlugin(context.Context, *DownloadPluginRequest) (*DownloadPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPlugin not implemented")
}
func (UnimplementedAgentServiceServer) ListAvailablePlugins(context.Context, *ListAvailablePluginsRequest) (*ListAvailablePluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailablePlugins not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}
func (UnimplementedAgentServiceServer) testEmbeddedByValue()                      {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_FetchTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).FetchTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_FetchTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).FetchTask(ctx, req.(*FetchTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReportTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportTaskStatus(ctx, req.(*ReportTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ReportTaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ReportTaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ReportTaskLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ReportTaskLog(ctx, req.(*ReportTaskLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_UpdateLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateLabels(ctx, req.(*UpdateLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_DownloadPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).DownloadPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_DownloadPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).DownloadPlugin(ctx, req.(*DownloadPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ListAvailablePlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailablePluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ListAvailablePlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ListAvailablePlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ListAvailablePlugins(ctx, req.(*ListAvailablePluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _AgentService_Heartbeat_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AgentService_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _AgentService_Unregister_Handler,
		},
		{
			MethodName: "FetchTask",
			Handler:    _AgentService_FetchTask_Handler,
		},
		{
			MethodName: "ReportTaskStatus",
			Handler:    _AgentService_ReportTaskStatus_Handler,
		},
		{
			MethodName: "ReportTaskLog",
			Handler:    _AgentService_ReportTaskLog_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _AgentService_CancelTask_Handler,
		},
		{
			MethodName: "UpdateLabels",
			Handler:    _AgentService_UpdateLabels_Handler,
		},
		{
			MethodName: "DownloadPlugin",
			Handler:    _AgentService_DownloadPlugin_Handler,
		},
		{
			MethodName: "ListAvailablePlugins",
			Handler:    _AgentService_ListAvailablePlugins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent/v1/agent.proto",
}
