syntax = "proto3";

package agent.v1;

import "task/v1/task.proto";

option go_package = "github.com/go-arcade/arcade/api/agent/v1;agentv1";

// AgentService - Main interface for communication between Agent and Server
service AgentService {
    // Heartbeat - Agent periodically sends heartbeat to Server
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

    // Register - Agent registers with Server on startup
    rpc Register(RegisterRequest) returns (RegisterResponse) {}

    // Unregister - Agent unregisters from Server on shutdown
    rpc Unregister(UnregisterRequest) returns (UnregisterResponse) {}

    // Fetch task - Agent actively pulls tasks to execute
    rpc FetchTask(FetchTaskRequest) returns (FetchTaskResponse) {}

    // Report task status - Agent reports status changes during task execution
    rpc ReportTaskStatus(ReportTaskStatusRequest) returns (ReportTaskStatusResponse) {}

    // Report task log - Agent batch reports task execution logs
    rpc ReportTaskLog(ReportTaskLogRequest) returns (ReportTaskLogResponse) {}

    // Cancel task - Server notifies Agent to cancel a running task
    rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse) {}

    // Update labels - Dynamically update Agent's labels
    rpc UpdateLabels(UpdateLabelsRequest) returns (UpdateLabelsResponse) {}

    // Download plugin - Agent downloads plugin from Server
    rpc DownloadPlugin(DownloadPluginRequest) returns (DownloadPluginResponse) {}

    // List available plugins - Agent queries available plugin list
    rpc ListAvailablePlugins(ListAvailablePluginsRequest) returns (ListAvailablePluginsResponse) {}
}

// Agent status enum
enum AgentStatus {
  AGENT_STATUS_UNSPECIFIED = 0;
  AGENT_STATUS_ONLINE = 1;   // Online
  AGENT_STATUS_OFFLINE = 2;  // Offline
  AGENT_STATUS_BUSY = 3;     // Busy
  AGENT_STATUS_IDLE = 4;     // Idle
}

// Heartbeat request
message HeartbeatRequest {
  string agent_id = 1;                // Agent unique identifier
  AgentStatus status = 2;             // Agent current status
  int32 running_jobs_count = 3;       // Number of running jobs
  int32 max_concurrent_jobs = 4;      // Maximum concurrent jobs
  map<string, string> metrics = 5;    // Agent metrics (CPU, memory, etc.)
  map<string, string> labels = 6;     // Agent labels (dynamically updatable)
}

// Heartbeat response
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
  int64 timestamp = 3;              // Server timestamp (for time synchronization)
}

// Agent registration request
message RegisterRequest {
  string agent_id = 1;                // Agent unique identifier (optional, generated by Server if not provided)
  string hostname = 2;                // Hostname
  string ip = 3;                      // IP address
  string os = 4;                      // Operating system
  string arch = 5;                    // Architecture (amd64, arm64, etc.)
  string version = 6;                 // Agent version
  int32 max_concurrent_jobs = 7;      // Maximum concurrent jobs
  map<string, string> labels = 8;     // Custom labels
  repeated string installed_plugins = 9; // List of installed plugins
}

// Agent registration response
message RegisterResponse {
  bool success = 1;
  string message = 2;
  string agent_id = 3;                // Agent ID assigned or confirmed by Server
  int64 heartbeat_interval = 4;       // Heartbeat interval (seconds)
}

// Agent unregistration request
message UnregisterRequest {
  string agent_id = 1;
  string reason = 2;                  // Unregistration reason
}

// Agent unregistration response
message UnregisterResponse {
  bool success = 1;
  string message = 2;
}

// Fetch task request
message FetchTaskRequest {
  string agent_id = 1;
  int32 max_jobs = 2;                 // Maximum number of tasks to fetch
  map<string, string> labels = 3;     // Agent labels (for task matching)
}

// Fetch task response
message FetchTaskResponse {
  bool success = 1;
  string message = 2;
  repeated Task tasks = 3;              // List of tasks to execute
}

// Task definition
message Task {
  string job_id = 1;                  // Job ID
  string name = 2;                    // Task name
  string pipeline_id = 3;             // Pipeline ID
  int32 stage = 4;                    // Stage number
  repeated string commands = 5;       // List of commands to execute
  map<string, string> env = 6;        // Environment variables
  string workspace = 7;               // Working directory
  int32 timeout = 8;                  // Timeout (seconds)
  string image = 9;                   // Docker image (if container execution is needed)
  map<string, string> secrets = 10;   // Secret information
  repeated Artifact artifacts = 11;   // Artifact configuration
  LabelSelector label_selector = 12;  // Label selector (for matching Agent)
  repeated PluginInfo plugins = 13;   // List of plugins required by task
}

// Artifact definition
message Artifact {
  string name = 1;                    // Artifact name
  string path = 2;                    // Artifact path (supports glob pattern)
  string destination = 3;             // Target storage path
}

// Report task status request
message ReportTaskStatusRequest {
  string agent_id = 1;
  string task_id = 2;
  task.v1.TaskStatus status = 3;               // Task status
  int32 exit_code = 4;                // Exit code
  string error_message = 5;           // Error message
  int64 start_time = 6;               // Start time (Unix timestamp)
  int64 end_time = 7;                 // End time (Unix timestamp)
  map<string, string> metrics = 8;    // Task execution metrics
}

// Report task status response
message ReportTaskStatusResponse {
  bool success = 1;
  string message = 2;
}

// Report task log request
message ReportTaskLogRequest {
  string agent_id = 1;
  string task_id = 2;
  repeated LogEntry logs = 3;         // Log entries
}

// Log entry
message LogEntry {
  int64 timestamp = 1;                // Timestamp
  string level = 2;                   // Log level (info, warn, error)
  string content = 3;                 // Log content
  int32 line_number = 4;              // Line number
}

// Report task log response
message ReportTaskLogResponse {
  bool success = 1;
  string message = 2;
}

// Cancel task request
message CancelTaskRequest {
  string agent_id = 1;
  string job_id = 2;
  string reason = 3;                  // Cancellation reason
}

// Cancel task response
message CancelTaskResponse {
  bool success = 1;
  string message = 2;
}

// Update agent labels request
message UpdateLabelsRequest {
  string agent_id = 1;
  map<string, string> labels = 2;     // Labels to update (complete replacement)
  bool merge = 3;                     // Merge mode (true=merge, false=replace)
}

// Update agent labels response
message UpdateLabelsResponse {
  bool success = 1;
  string message = 2;
  map<string, string> labels = 3;     // Updated labels
}

// Label selector - For matching Agent with task
message LabelSelector {
  // Match all specified labels (AND logic)
  map<string, string> match_labels = 1;

  // Label expressions (support more complex matching rules)
  repeated LabelSelectorRequirement match_expressions = 2;
}

// Label selector requirement
message LabelSelectorRequirement {
  string key = 1;                     // Label key
  LabelOperator operator = 2;         // Operator
  repeated string values = 3;         // Value list
}

// Label operator
enum LabelOperator {
  LABEL_OPERATOR_UNSPECIFIED = 0;
  LABEL_OPERATOR_IN = 1;              // Label value is in values list
  LABEL_OPERATOR_NOT_IN = 2;          // Label value is not in values list
  LABEL_OPERATOR_EXISTS = 3;          // Label key exists
  LABEL_OPERATOR_NOT_EXISTS = 4;      // Label key does not exist
  LABEL_OPERATOR_GT = 5;              // Label value is greater than specified value (for numeric comparison)
  LABEL_OPERATOR_LT = 6;              // Label value is less than specified value (for numeric comparison)
}

// ============ Plugin Distribution Related ============

// Plugin information
message PluginInfo {
  string plugin_id = 1;               // Plugin ID
  string name = 2;                    // Plugin name
  string version = 3;                 // Version number
  string checksum = 4;                // SHA256 checksum
  int64 size = 5;                     // File size (bytes)
  string download_url = 6;            // Download URL (optional, for CDN distribution)
  PluginLocation location = 7;        // Plugin location
}

// Plugin location
enum PluginLocation {
  PLUGIN_LOCATION_UNSPECIFIED = 0;
  PLUGIN_LOCATION_SERVER = 1;         // Server filesystem
  PLUGIN_LOCATION_STORAGE = 2;        // Object storage
  PLUGIN_LOCATION_REGISTRY = 3;       // Plugin registry
}

// Download plugin request
message DownloadPluginRequest {
  string agent_id = 1;                // Agent ID
  string plugin_id = 2;               // Plugin ID
  string version = 3;                 // Version number (optional, download latest if not specified)
}

// Download plugin response
message DownloadPluginResponse {
  bool success = 1;                   // Success status
  string message = 2;                 // Message
  bytes plugin_data = 3;              // Plugin binary data
  string checksum = 4;                // SHA256 checksum
  int64 size = 5;                     // File size
  string version = 6;                 // Actual version number
}

// List available plugins request
message ListAvailablePluginsRequest {
  string agent_id = 1;                // Agent ID
  string plugin_type = 2;             // Optional: filter by type (notify/ci/cd/security, etc.)
}

// List available plugins response
message ListAvailablePluginsResponse {
  bool success = 1;
  string message = 2;
  repeated PluginInfo plugins = 3;    // List of available plugins
}
