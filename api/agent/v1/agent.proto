syntax = "proto3";

package api.agent.v1;

option go_package = "github.com/observabil/arcade/api/agent/v1/proto;v1";

// Agent服务 - Agent端与Server端通信的主要接口
service Agent {
  // 心跳保持 - Agent定期向Server发送心跳
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
  
  // Agent注册 - Agent启动时向Server注册
  rpc Register(RegisterRequest) returns (RegisterResponse) {}
  
  // Agent注销 - Agent关闭时向Server注销
  rpc Unregister(UnregisterRequest) returns (UnregisterResponse) {}
  
  // 获取任务 - Agent主动拉取待执行的任务
  rpc FetchJob(FetchJobRequest) returns (FetchJobResponse) {}
  
  // 上报任务状态 - Agent执行任务过程中上报状态变化
  rpc ReportJobStatus(ReportJobStatusRequest) returns (ReportJobStatusResponse) {}
  
  // 上报任务日志 - Agent批量上报任务执行日志
  rpc ReportJobLog(ReportJobLogRequest) returns (ReportJobLogResponse) {}
  
  // 取消任务 - Server通知Agent取消正在执行的任务
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse) {}
  
  // 更新Agent标签 - 动态更新Agent的labels和tags
  rpc UpdateLabels(UpdateLabelsRequest) returns (UpdateLabelsResponse) {}
}

// Agent状态枚举
enum AgentStatus {
  AGENT_STATUS_UNKNOWN = 0;
  AGENT_STATUS_ONLINE = 1;   // 在线
  AGENT_STATUS_OFFLINE = 2;  // 离线
  AGENT_STATUS_BUSY = 3;     // 忙碌
  AGENT_STATUS_IDLE = 4;     // 空闲
}

// 任务状态枚举
enum JobStatus {
  JOB_STATUS_UNKNOWN = 0;
  JOB_STATUS_PENDING = 1;    // 等待执行
  JOB_STATUS_RUNNING = 2;    // 执行中
  JOB_STATUS_SUCCESS = 3;    // 执行成功
  JOB_STATUS_FAILED = 4;     // 执行失败
  JOB_STATUS_CANCELLED = 5;  // 已取消
  JOB_STATUS_TIMEOUT = 6;    // 超时
}

// 心跳请求
message HeartbeatRequest {
  string agent_id = 1;                // Agent唯一标识
  AgentStatus status = 2;             // Agent当前状态
  int32 running_jobs_count = 3;       // 正在执行的任务数
  int32 max_concurrent_jobs = 4;      // 最大并发任务数
  map<string, string> metrics = 5;    // Agent指标（CPU、内存等）
  map<string, string> labels = 6;     // Agent标签（可动态更新）
}

// 心跳响应
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
  int64 server_time = 3;              // 服务器时间戳（用于时间同步）
}

// Agent注册请求
message RegisterRequest {
  string agent_id = 1;                // Agent唯一标识（可选，不提供则由Server生成）
  string hostname = 2;                // 主机名
  string ip = 3;                      // IP地址
  string os = 4;                      // 操作系统
  string arch = 5;                    // 架构（amd64、arm64等）
  string version = 6;                 // Agent版本
  repeated string tags = 7;           // Agent标签（用于任务路由）
  int32 max_concurrent_jobs = 8;      // 最大并发任务数
  map<string, string> labels = 9;     // 自定义标签
}

// Agent注册响应
message RegisterResponse {
  bool success = 1;
  string message = 2;
  string agent_id = 3;                // Server分配或确认的Agent ID
  int64 heartbeat_interval = 4;       // 心跳间隔（秒）
}

// Agent注销请求
message UnregisterRequest {
  string agent_id = 1;
  string reason = 2;                  // 注销原因
}

// Agent注销响应
message UnregisterResponse {
  bool success = 1;
  string message = 2;
}

// 获取任务请求
message FetchJobRequest {
  string agent_id = 1;
  int32 max_jobs = 2;                 // 最多获取的任务数
  repeated string tags = 3;           // Agent支持的标签（已废弃，建议使用labels）
  map<string, string> labels = 4;     // Agent标签（用于任务匹配）
}

// 获取任务响应
message FetchJobResponse {
  bool success = 1;
  string message = 2;
  repeated Job jobs = 3;              // 待执行的任务列表
}

// 任务定义
message Job {
  string job_id = 1;                  // 任务ID
  string name = 2;                    // 任务名称
  string pipeline_id = 3;             // 所属流水线ID
  int32 stage = 4;                    // 阶段序号
  repeated string commands = 5;       // 执行命令列表
  map<string, string> env = 6;        // 环境变量
  string workspace = 7;               // 工作目录
  int32 timeout = 8;                  // 超时时间（秒）
  repeated string tags = 9;           // 任务标签（已废弃，建议使用label_selector）
  string image = 10;                  // Docker镜像（如果需要容器执行）
  map<string, string> secrets = 11;   // 密钥信息
  repeated Artifact artifacts = 12;   // 产物配置
  LabelSelector label_selector = 13;  // 标签选择器（用于匹配Agent）
}

// 产物定义
message Artifact {
  string name = 1;                    // 产物名称
  string path = 2;                    // 产物路径（支持glob模式）
  string destination = 3;             // 目标存储路径
}

// 上报任务状态请求
message ReportJobStatusRequest {
  string agent_id = 1;
  string job_id = 2;
  JobStatus status = 3;               // 任务状态
  int32 exit_code = 4;                // 退出码
  string error_message = 5;           // 错误信息
  int64 start_time = 6;               // 开始时间（Unix时间戳）
  int64 end_time = 7;                 // 结束时间（Unix时间戳）
  map<string, string> metrics = 8;    // 任务执行指标
}

// 上报任务状态响应
message ReportJobStatusResponse {
  bool success = 1;
  string message = 2;
}

// 上报任务日志请求
message ReportJobLogRequest {
  string agent_id = 1;
  string job_id = 2;
  repeated LogEntry logs = 3;         // 日志条目
}

// 日志条目
message LogEntry {
  int64 timestamp = 1;                // 时间戳
  string level = 2;                   // 日志级别（info、warn、error）
  string content = 3;                 // 日志内容
  int32 line_number = 4;              // 行号
}

// 上报任务日志响应
message ReportJobLogResponse {
  bool success = 1;
  string message = 2;
}

// 取消任务请求
message CancelJobRequest {
  string agent_id = 1;
  string job_id = 2;
  string reason = 3;                  // 取消原因
}

// 取消任务响应
message CancelJobResponse {
  bool success = 1;
  string message = 2;
}

// 更新Agent标签请求
message UpdateLabelsRequest {
  string agent_id = 1;
  map<string, string> labels = 2;     // 要更新的标签（完全替换）
  repeated string tags = 3;           // 要更新的标签列表（完全替换）
  bool merge = 4;                     // 是否合并模式（true=合并，false=替换）
}

// 更新Agent标签响应
message UpdateLabelsResponse {
  bool success = 1;
  string message = 2;
  map<string, string> labels = 3;     // 更新后的标签
}

// 标签选择器 - 用于任务匹配Agent
message LabelSelector {
  // 匹配所有指定的标签（AND逻辑）
  map<string, string> match_labels = 1;
  
  // 标签表达式（支持更复杂的匹配规则）
  repeated LabelSelectorRequirement match_expressions = 2;
}

// 标签选择器要求
message LabelSelectorRequirement {
  string key = 1;                     // 标签key
  LabelOperator operator = 2;         // 操作符
  repeated string values = 3;         // 值列表
}

// 标签操作符
enum LabelOperator {
  LABEL_OPERATOR_UNKNOWN = 0;
  LABEL_OPERATOR_IN = 1;              // 标签值在values列表中
  LABEL_OPERATOR_NOT_IN = 2;          // 标签值不在values列表中
  LABEL_OPERATOR_EXISTS = 3;          // 标签key存在
  LABEL_OPERATOR_NOT_EXISTS = 4;      // 标签key不存在
  LABEL_OPERATOR_GT = 5;              // 标签值大于指定值（用于数值比较）
  LABEL_OPERATOR_LT = 6;              // 标签值小于指定值（用于数值比较）
}
