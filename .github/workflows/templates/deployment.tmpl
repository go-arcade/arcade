apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ${SERVICE_NAME}
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  progressDeadlineSeconds: 600
  replicas: ${Replicas}
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
        projecttype: go
    spec:
      containers:
        - env:
            - name: LANG
              value: en_US.UTF-8
            - name: LANGUAGE
              value: 'en_US:en'
            - name: LC_ALL
              value: en_US.UTF-8
            - name: SERVER_ENV
              value: ${SERVER_ENV}
            - name: APPNAME
              value: ${SERVICE_NAME}
          image: ${IMAGE_NAME}
          command:
            - ./bin/arcade
            - -conf
            - conf.d/config.toml
          volumeMounts:
          - mountPath: /opt/arcade/conf.d/config.toml
            name: config-volume
            subPath: config.toml
          - mountPath: /opt/arcade/conf.d/model.conf
            name: config-volume
            subPath: model.conf
          imagePullPolicy: Always
          name: ${SERVICE_NAME}
          resources:
            limits:
              memory: ${MEMORY_LIMITS}
              cpu: ${CPU_LIMITS}
            requests:
              cpu: ${CPU_REQUESTS}
              memory: ${MEMORY_REQUESTS}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      volumes:
      - name: config-volume
        configMap:
          name: arcade-configmap
      imagePullSecrets:
        - name: github-docker-key
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
